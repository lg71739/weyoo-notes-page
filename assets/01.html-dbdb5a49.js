import{_ as o,r as i,o as s,c as t,d as a,e,b as r,f as d}from"./app-19e0b0f0.js";const h={},p=d('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js是一个能够在服务器端运行JavaScript的开放源代码、是一个跨平台JavaScript运行环境。</p><p>Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。</p><p>node.js就是使用javascript编写，并且运行在服务器。<br> 也就是说node.js实现了使用js来开发后端。<br> node.js把js的战场从浏览器转移到服务器，可以进行更多的操作。</p><p>用户请求和响应的过程：</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/3_10_22_34_202303031022375.png" alt="image-1" tabindex="0" loading="lazy"><figcaption>image-1</figcaption></figure><h2 id="官网" tabindex="-1"><a class="header-anchor" href="#官网" aria-hidden="true">#</a> 官网</h2>',8),c={href:"https://nodejs.org/en/",target:"_blank",rel:"noopener noreferrer"},l=a("br",null,null,-1),m={href:"http://nodejs.cn/download/",target:"_blank",rel:"noopener noreferrer"},b=d('<figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/3_10_24_40_202303031024071.png" alt="iamge-2" tabindex="0" loading="lazy"><figcaption>iamge-2</figcaption></figure><h2 id="产生原因" tabindex="-1"><a class="header-anchor" href="#产生原因" aria-hidden="true">#</a> 产生原因</h2><p>Node.js的产生原因要追溯到服务器的阻塞问题：</p><p>传统服务器每次产生一个请求，就对应着一个线程。<br> 那么就有一个问题：请求的速度由用户决定，响应的速度也可以通过提升带宽等方法比较容易的提升速度。但是I/O的输入输出速度是比较难提升的。而每一个请求就会产生一个线程，数据请求又比较慢就会出现有很多线程再缓存中等待，就会造成大量的内存浪费。所以使用Node.js编写的服务器采用单线程模式，即不管产生多少请求就只有一个线程，这样就可以节省空间，大大降低了成本。</p><p>我们常说JS是单线程的，这也与它运行在nodejs上的有关。</p><h2 id="nodejs特点" tabindex="-1"><a class="header-anchor" href="#nodejs特点" aria-hidden="true">#</a> nodejs特点</h2><p>Node采用Google开发的V8引擎运行js代码，使用事件驱动、非阻塞和异步模型等技术来提高性能，可优化应用程序的传输量和规模。<br> Nodejs是基于V8引擎，V8是Google发布的开源JavaScript引擎，本身就是用于Chrome浏览器的js解释部分，但是Ryan Dahl鬼才般地，把这个V8搬到了服务器上，用于做服务器的软件。</p><p>Node大部分基本模块都用JavaScript编写。在Node出现之前，JS通常作为客户端程序设计语言使用，以JS写出的程序常在用户的浏览器上运行。</p><p>Node.js的单线程是Node.js的一个最大的优点，但是同时也是它的缺点。<br> 因为毕竟是单线程，如果请求太多会处理不过来的，所以我们一般情况下采用分布式的方法来弥补这个缺点。分布式是指采取多个服务器，node.js对服务器的要求不高，所以不必担心价格问题。</p><h2 id="nodejs的用途" tabindex="-1"><a class="header-anchor" href="#nodejs的用途" aria-hidden="true">#</a> nodejs的用途</h2><p>nodejs编写的就是服务器，所以服务器有的作用它都有，如：</p><p>Web服务API，比如REST<br> 实时多人游戏<br> 后端的Web服务，例如跨域、服务器端的请求<br> 基于Web的应用<br> 多客户端的通信，如即时通信<br> 作为底层开发工具：<br><code>node.js =&gt; webpack=&gt; vue,recat</code>脚手架开发方式</p><h2 id="几个相关概念" tabindex="-1"><a class="header-anchor" href="#几个相关概念" aria-hidden="true">#</a> 几个相关概念</h2><h3 id="nvm" tabindex="-1"><a class="header-anchor" href="#nvm" aria-hidden="true">#</a> nvm</h3><p>node.js 版本管理工具；不同项目可能需要不同版本的 node；可以使用 nvm 来管理 node.js 版本</p><h3 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h3><p>node.js 包管理工具；用来管理 node.js 中的第三方插件；新版本的 node 在安装的时候，会自动安装对应版本的 npm</p><h3 id="nrm" tabindex="-1"><a class="header-anchor" href="#nrm" aria-hidden="true">#</a> nrm</h3><p>npm 源的管理工具，可以用来方便的切换 npm 源</p><h3 id="cnpm" tabindex="-1"><a class="header-anchor" href="#cnpm" aria-hidden="true">#</a> cnpm</h3><p>使用的是淘宝的源。用法跟 npm 完全一致。cnpm 经常会有问题，所以在很多地方不推荐使用</p><h3 id="yarn" tabindex="-1"><a class="header-anchor" href="#yarn" aria-hidden="true">#</a> yarn</h3><p>经过重新设计的崭新的 npm 客户端；运行速度显著提升，整个安装时间比 npm 少。一般推荐使用 yarn 代替 npm</p><h3 id="npx" tabindex="-1"><a class="header-anchor" href="#npx" aria-hidden="true">#</a> npx</h3><p>一个 npm 包执行器。我们可以使用 npx 来执行各种命令。</p>',25);function j(_,f){const n=i("ExternalLinkIcon");return s(),t("div",null,[p,a("p",null,[e("官网："),a("a",c,[e("https://nodejs.org/en/"),r(n)]),l,e(" 中文官网："),a("a",m,[e("http://nodejs.cn/download/"),r(n)])]),b])}const u=o(h,[["render",j],["__file","01.html.vue"]]);export{u as default};
