import{_ as i,r as c,o,c as p,d as t,e as n,b as s,f as e}from"./app-19e0b0f0.js";const r={},d=t("h1",{id:"实现原理",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#实现原理","aria-hidden":"true"},"#"),n(" 实现原理")],-1),l={href:"https://docs.spring.io/spring-security/site/docs/5.5.4/reference/html5/#servlet-architecture",target:"_blank",rel:"noopener noreferrer"},u=e(`<h2 id="配置相关" tabindex="-1"><a class="header-anchor" href="#配置相关" aria-hidden="true">#</a> 配置相关</h2><p>加载默认配置的类SpringBootWebSecurityConfiguration，这个类是 spring boot 自动配置类，通过这个源码得知，默认情况下对所有请求进行权限控制:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnDefaultWebSecurity</span>
<span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SERVLET</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">SpringBootWebSecurityConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token class-name">SecurityProperties</span><span class="token punctuation">.</span><span class="token constant">BASIC_AUTH_ORDER</span><span class="token punctuation">)</span>
    <span class="token class-name">SecurityFilterChain</span> <span class="token function">defaultSecurityFilterChain</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> 
    <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">//要求所有请求都要认证</span>
    http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/28_13_31_3_image-20220112095052138.png" alt="image-20220112095052138" tabindex="0" loading="lazy"><figcaption>image-20220112095052138</figcaption></figure><p><strong>这就是为什么在引入 Spring Security 中没有任何配置情况下，请求会被拦截的原因！</strong></p><p>通过上面对自动配置分析，我们也能看出默认生效条件为:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">DefaultWebSecurityCondition</span> <span class="token keyword">extends</span> <span class="token class-name">AllNestedConditions</span> <span class="token punctuation">{</span>

    <span class="token class-name">DefaultWebSecurityCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">ConfigurationPhase</span><span class="token punctuation">.</span><span class="token constant">REGISTER_BEAN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">SecurityFilterChain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">HttpSecurity</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Classes</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SecurityFilterChain</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Beans</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>条件一 classpath中存在 SecurityFilterChain.class, HttpSecurity.class</li><li>条件二 没有自定义 WebSecurityConfigurerAdapter.class, SecurityFilterChain.class</li></ul><p>**结论：**只要我们不自定义配置类(比如WebSecurityConfigurerAdapter) ，条件都是满足的，也就加载默认的配置。否则如果要进行自定义配置，就要继承这个WebSecurityConfigurerAdapter类，通过覆盖类中方法达到修改默认配置的目的。<strong>WebSecurityConfigurerAdapter</strong> 这个类极其重要，Spring Security 核心配置都在这个类中：</p><figure><img src="https://shrink.fun/note/spring-security/SpringSecurity.assets/image-20220112095638356.png" alt="image-20220112095638356" tabindex="0" loading="lazy"><figcaption>image-20220112095638356</figcaption></figure><h2 id="执行流程" tabindex="-1"><a class="header-anchor" href="#执行流程" aria-hidden="true">#</a> 执行流程</h2>`,11),k=t("code",null,"认证、授权",-1),g={href:"https://docs.spring.io/spring-security/site/docs/5.5.4/reference/html5/#servlet-architecture",target:"_blank",rel:"noopener noreferrer"},h=e('<figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/28_13_33_5_流程图.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要注意的是，默认过滤器并不是直接放在 Web 项目的原生过滤器链中，而是通过一个 FilterChainProxy 来统一管理。Spring Security 中的过滤器链通过 FilterChainProxy 嵌入到 Web项目的原生过滤器链中。FilterChainProxy 作为一个顶层的管理者，将统一管理 Security Filter。FilterChainProxy 本身是通过 Spring 框架提供的 DelegatingFilterProxy 整合到原生的过滤器链中。</p><p>SecurityFilter的使用情况和调用顺序如下</p><table><thead><tr><th>过滤器</th><th>过滤器作用</th><th>默认是否加载</th></tr></thead><tbody><tr><td>ChannelProcessingFilter</td><td>过滤请求协议 HTTP 、HTTPS</td><td>NO</td></tr><tr><td><code>WebAsyncManagerIntegrationFilter</code></td><td>将 WebAsyncManger 与 SpringSecurity 上下文进行集成</td><td>YES</td></tr><tr><td><code>SecurityContextPersistenceFilter</code></td><td>在处理请求之前,将安全信息加载到 SecurityContextHolder 中</td><td>YES</td></tr><tr><td><code>HeaderWriterFilter</code></td><td>处理头信息加入响应中</td><td>YES</td></tr><tr><td>CorsFilter</td><td>处理跨域问题</td><td>NO</td></tr><tr><td><code>CsrfFilter</code></td><td>处理 CSRF 攻击</td><td>YES</td></tr><tr><td><code>LogoutFilter</code></td><td>处理注销登录</td><td>YES</td></tr><tr><td>OAuth2AuthorizationRequestRedirectFilter</td><td>处理 OAuth2 认证重定向</td><td>NO</td></tr><tr><td>Saml2WebSsoAuthenticationRequestFilter</td><td>处理 SAML 认证</td><td>NO</td></tr><tr><td>X509AuthenticationFilter</td><td>处理 X509 认证</td><td>NO</td></tr><tr><td>AbstractPreAuthenticatedProcessingFilter</td><td>处理预认证问题</td><td>NO</td></tr><tr><td>CasAuthenticationFilter</td><td>处理 CAS 单点登录</td><td>NO</td></tr><tr><td>OAuth2LoginAuthenticationFilter</td><td>处理 OAuth2 认证</td><td>NO</td></tr><tr><td>Saml2WebSsoAuthenticationFilter</td><td>处理 SAML 认证</td><td>NO</td></tr><tr><td><code>UsernamePasswordAuthenticationFilter</code></td><td>处理表单登录</td><td>YES</td></tr><tr><td>OpenIDAuthenticationFilter</td><td>处理 OpenID 认证</td><td>NO</td></tr><tr><td><code>DefaultLoginPageGeneratingFilter</code></td><td>配置默认登录页面</td><td>YES</td></tr><tr><td><code>DefaultLogoutPageGeneratingFilter</code></td><td>配置默认注销页面</td><td>YES</td></tr><tr><td>ConcurrentSessionFilter</td><td>处理 Session 有效期</td><td>NO</td></tr><tr><td>DigestAuthenticationFilter</td><td>处理 HTTP 摘要认证</td><td>NO</td></tr><tr><td>BearerTokenAuthenticationFilter</td><td>处理 OAuth2 认证的 Access Token</td><td>NO</td></tr><tr><td><code>BasicAuthenticationFilter</code></td><td>处理 HttpBasic 登录</td><td>YES</td></tr><tr><td><code>RequestCacheAwareFilter</code></td><td>处理请求缓存</td><td>YES</td></tr><tr><td><code>SecurityContextHolder&lt;br /&gt;AwareRequestFilter</code></td><td>包装原始请求</td><td>YES</td></tr><tr><td>JaasApiIntegrationFilter</td><td>处理 JAAS 认证</td><td>NO</td></tr><tr><td>RememberMeAuthenticationFilter</td><td>处理 RememberMe 登录</td><td>NO</td></tr><tr><td><code>AnonymousAuthenticationFilter</code></td><td>配置匿名认证</td><td>YES</td></tr><tr><td>OAuth2AuthorizationCodeGrantFilter</td><td>处理OAuth2认证中授权码</td><td>NO</td></tr><tr><td><code>SessionManagementFilter</code></td><td>处理 session 并发问题</td><td>YES</td></tr><tr><td><code>ExceptionTranslationFilter</code></td><td>处理认证/授权中的异常</td><td>YES</td></tr><tr><td><code>FilterSecurityInterceptor</code></td><td>处理授权相关</td><td>YES</td></tr><tr><td>SwitchUserFilter</td><td>处理账户切换</td><td>NO</td></tr></tbody></table><p>可以看出，Spring Security 提供了 30 多个过滤器。默认情况下Spring Boot 在对 Spring Security 进入自动化配置时，会创建一个名为 SpringSecurityFilerChain 的过滤器，并注入到 Spring 容器中，这个过滤器将负责所有的安全管理，包括用户认证、授权、重定向到登录页面等。具体可以参考WebSecurityConfiguration的源码:</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/28_13_33_55_image-20220111211538604.png" alt="image-20220111211538604" tabindex="0" loading="lazy"><figcaption>image-20220111211538604</figcaption></figure><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/28_13_34_3_image-20220111211436764.png" alt="image-20220111211436764" tabindex="0" loading="lazy"><figcaption>image-20220111211436764</figcaption></figure><h2 id="登录流程图" tabindex="-1"><a class="header-anchor" href="#登录流程图" aria-hidden="true">#</a> 登录流程图</h2><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/28_13_34_18_%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',9);function m(b,S){const a=c("ExternalLinkIcon");return o(),p("div",null,[d,t("blockquote",null,[t("p",null,[t("a",l,[n("https://docs.spring.io/spring-security/site/docs/5.5.4/reference/html5/#servlet-architecture"),s(a)])])]),u,t("p",null,[n("在 SpringSecurity 中 "),k,n(" 等功能都是基于"),t("a",g,[n("过滤器"),s(a)]),n("完成的。")]),h])}const y=i(r,[["render",m],["__file","30-1679900062089.html.vue"]]);export{y as default};
