import{_ as o,r as c,o as p,c as l,d as s,e as n,b as e,f as t}from"./app-19e0b0f0.js";const i={},u=s("h1",{id:"如何使用",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#如何使用","aria-hidden":"true"},"#"),n(" 如何使用")],-1),d=s("p",null,"Sentinel 可以简单的分为 Sentinel 核心库和 Dashboard。核心库不依赖 Dashboard，但是结合 Dashboard 可以取得最好的效果。",-1),r={href:"https://github.com/alibaba/Sentinel/wiki/%E6%96%B0%E6%89%8B%E6%8C%87%E5%8D%97#%E5%85%AC%E7%BD%91-demo",target:"_blank",rel:"noopener noreferrer"},k=t('<p>我们说的资源，可以是任何东西，服务，服务里的方法，甚至是一段代码。使用 Sentinel 来进行资源保护，主要分为几个步骤:</p><ol><li>定义资源</li><li>定义规则</li><li>检验规则是否生效</li></ol><p>先把可能需要保护的资源定义好（埋点），之后再配置规则。也可以理解为，只要有了资源，我们就可以在任何时候灵活地定义各种流量控制规则。在编码的时候，只需要考虑这个代码是否需要保护，如果需要保护，就将之定义为一个资源。</p><p>对于主流的框架，我们提供适配，只需要按照适配中的说明配置，Sentinel 就会默认定义提供的服务，方法等为资源。</p><h2 id="定义资源" tabindex="-1"><a class="header-anchor" href="#定义资源" aria-hidden="true">#</a> 定义资源</h2><h3 id="方式一-主流框架的默认适配" tabindex="-1"><a class="header-anchor" href="#方式一-主流框架的默认适配" aria-hidden="true">#</a> 方式一：主流框架的默认适配</h3>',6),m={href:"https://github.com/alibaba/Sentinel/wiki/%E4%B8%BB%E6%B5%81%E6%A1%86%E6%9E%B6%E7%9A%84%E9%80%82%E9%85%8D",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="方式二-抛出异常的方式定义资源" tabindex="-1"><a class="header-anchor" href="#方式二-抛出异常的方式定义资源" aria-hidden="true">#</a> 方式二：抛出异常的方式定义资源</h3><p><code>SphU</code> 包含了 try-catch 风格的 API。用这种方式，当资源发生了限流之后会抛出 <code>BlockException</code>。这个时候可以捕捉异常，进行限流之后的逻辑处理。示例代码如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1.5.0 版本开始可以利用 try-with-resources 特性（使用有限制）</span>
<span class="token comment">// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&quot;resourceName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 被保护的业务逻辑</span>
  <span class="token comment">// do something here...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 资源访问阻止，被限流或被降级</span>
  <span class="token comment">// 在此处进行相应的处理操作</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>特别地</strong>，若 entry 的时候传入了热点参数，那么 exit 的时候也一定要带上对应的参数（<code>exit(count, args)</code>），否则可能会有统计错误。这个时候不能使用 try-with-resources 的方式。另外通过 <code>Tracer.trace(ex)</code> 来统计异常信息时，由于 try-with-resources 语法中 catch 调用顺序的问题，会导致无法正确统计异常数，因此统计异常信息时也不能在 try-with-resources 的 catch 块中调用 <code>Tracer.trace(ex)</code>。</p><p>手动 exit 示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 务必保证 finally 会被执行</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// 资源名可使用任意有业务语义的字符串，注意数目不能太多（超过 1K），超出几千请作为参数传入而不要直接作为资源名</span>
  <span class="token comment">// EntryType 代表流量类型（inbound/outbound），其中系统规则只对 IN 类型的埋点生效</span>
  entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&quot;自定义资源名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 被保护的业务逻辑</span>
  <span class="token comment">// do something...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 资源访问阻止，被限流或被降级</span>
  <span class="token comment">// 进行相应的处理操作</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 若需要配置降级规则，需要通过这种方式记录业务异常</span>
  <span class="token class-name">Tracer</span><span class="token punctuation">.</span><span class="token function">traceEntry</span><span class="token punctuation">(</span>ex<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token comment">// 务必保证 exit，务必保证每个 entry 与 exit 配对</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>热点参数埋点示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 若需要配置例外项，则传入的参数只支持基本类型。</span>
    <span class="token comment">// EntryType 代表流量类型，其中系统规则只对 IN 类型的埋点生效</span>
    <span class="token comment">// count 大多数情况都填 1，代表统计为一次调用。</span>
    entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> paramA<span class="token punctuation">,</span> paramB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Your logic here.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Handle request rejection.</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注意：exit 的时候也一定要带上对应的参数，否则可能会有统计错误。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> paramA<span class="token punctuation">,</span> paramB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SphU.entry()</code> 的参数描述：</p><table><thead><tr><th>参数名</th><th>类型</th><th>解释</th><th>默认值</th></tr></thead><tbody><tr><td>entryType</td><td><code>EntryType</code></td><td>资源调用的流量类型，是入口流量（<code>EntryType.IN</code>）还是出口流量（<code>EntryType.OUT</code>），注意系统规则只对 IN 生效</td><td><code>EntryType.OUT</code></td></tr><tr><td>count</td><td><code>int</code></td><td>本次资源调用请求的 token 数目</td><td>1</td></tr><tr><td>args</td><td><code>Object[]</code></td><td>传入的参数，用于热点参数限流</td><td>无</td></tr></tbody></table><p><strong>注意</strong>：<code>SphU.entry(xxx)</code> 需要与 <code>entry.exit()</code> 方法成对出现，匹配调用，否则会导致调用链记录异常，抛出 <code>ErrorEntryFreeException</code> 异常。常见的错误：</p><ul><li>自定义埋点只调用 <code>SphU.entry()</code>，没有调用 <code>entry.exit()</code></li><li>顺序错误，比如：<code>entry1 -&gt; entry2 -&gt; exit1 -&gt; exit2</code>，应该为 <code>entry1 -&gt; entry2 -&gt; exit2 -&gt; exit1</code></li></ul><h3 id="方式三-返回布尔值方式定义资源" tabindex="-1"><a class="header-anchor" href="#方式三-返回布尔值方式定义资源" aria-hidden="true">#</a> 方式三：返回布尔值方式定义资源</h3><p><code>SphO</code> 提供 if-else 风格的 API。用这种方式，当资源发生了限流之后会返回 <code>false</code>，这个时候可以根据返回值，进行限流之后的逻辑处理。示例代码如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">// 资源名可使用任意有业务语义的字符串</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">SphO</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&quot;自定义资源名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 务必保证finally会被执行</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token doc-comment comment">/**
      * 被保护的业务逻辑
      */</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token class-name">SphO</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 资源访问阻止，被限流或被降级</span>
    <span class="token comment">// 进行相应的处理操作</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：<code>SphO.entry(xxx)</code> 需要与 SphO.exit()<code>方法成对出现，匹配调用，位置正确，否则会导致调用链记录异常，抛出</code>ErrorEntryFreeException\` 异常。</p><h3 id="方式四-注解方式定义资源" tabindex="-1"><a class="header-anchor" href="#方式四-注解方式定义资源" aria-hidden="true">#</a> 方式四：注解方式定义资源</h3><p>Sentinel 支持通过 <code>@SentinelResource</code> 注解定义资源并配置 <code>blockHandler</code> 和 <code>fallback</code> 函数来进行限流之后的处理。示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 原本的业务方法.</span>
<span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>blockHandler <span class="token operator">=</span> <span class="token string">&quot;blockHandlerForGetUser&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;getUserById command failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// blockHandler 函数，原方法调用被限流/降级/系统保护的时候调用</span>
<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">blockHandlerForGetUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),h=s("code",null,"blockHandler",-1),b=s("code",null,"fallback",-1),y=s("code",null,"blockHandler",-1),g=s("code",null,"fallback",-1),x={href:"https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81",target:"_blank",rel:"noopener noreferrer"},f=t(`<h3 id="方式五-异步调用支持" tabindex="-1"><a class="header-anchor" href="#方式五-异步调用支持" aria-hidden="true">#</a> 方式五：异步调用支持</h3><p>Sentinel 支持异步调用链路的统计。在异步调用中，需要通过 <code>SphU.asyncEntry(xxx)</code> 方法定义资源，并通常需要在异步的回调函数中调用 <code>exit</code> 方法。以下是一个简单的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">AsyncEntry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">asyncEntry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 异步调用.</span>
    <span class="token function">doAsync</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在此处处理异步调用的结果.</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在回调结束后 exit.</span>
            entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Request blocked.</span>
    <span class="token comment">// Handle the exception (e.g. retry or fallback).</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SphU.asyncEntry(xxx)</code> 不会影响当前（调用线程）的 Context，因此以下两个 entry 在调用链上是平级关系（处于同一层），而不是嵌套关系：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 调用链类似于：</span>
<span class="token comment">// -parent</span>
<span class="token comment">// ---asyncResource</span>
<span class="token comment">// ---syncResource</span>
asyncEntry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">asyncEntry</span><span class="token punctuation">(</span>asyncResource<span class="token punctuation">)</span><span class="token punctuation">;</span>
entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>normalResource<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若在异步回调中需要嵌套其它的资源调用（无论是 <code>entry</code> 还是 <code>asyncEntry</code>），只需要借助 Sentinel 提供的上下文切换功能，在对应的地方通过 <code>ContextUtil.runOnContext(context, f)</code> 进行 Context 变换，将对应资源调用处的 Context 切换为生成的异步 Context，即可维持正确的调用链路关系。示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token class-name">String</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Entry</span> entry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span><span class="token string">&quot;handleResultForAsync&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Handle your result here.</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Blocked for the result handler.</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">someAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">AsyncEntry</span> entry <span class="token operator">=</span> <span class="token class-name">SphU</span><span class="token punctuation">.</span><span class="token function">asyncEntry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Asynchronous invocation.</span>
        <span class="token function">doAsync</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在异步回调中进行上下文变换，通过 AsyncEntry 的 getAsyncContext 方法获取异步 Context</span>
            <span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">runOnContext</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getAsyncContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 此处嵌套正常的资源调用.</span>
                    <span class="token function">handleResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    entry<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Request blocked.</span>
        <span class="token comment">// Handle the exception (e.g. retry or fallback).</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时的调用链就类似于：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-parent
---asyncInvocation
-----handleResultForAsync
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),E={href:"https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-basic/src/main/java/com/alibaba/csp/sentinel/demo/AsyncEntryDemo.java",target:"_blank",rel:"noopener noreferrer"},_=t(`<h2 id="规则的种类" tabindex="-1"><a class="header-anchor" href="#规则的种类" aria-hidden="true">#</a> 规则的种类</h2><p>Sentinel 的所有规则都可以在内存态中动态地查询及修改，修改之后立即生效。同时 Sentinel 也提供相关 API，供您来定制自己的规则策略。</p><p>Sentinel 支持以下几种规则：<strong>流量控制规则</strong>、<strong>熔断降级规则</strong>、<strong>系统保护规则</strong>、<strong>来源访问控制规则</strong> 和 <strong>热点参数规则</strong>。</p><h3 id="流量控制规则-flowrule" tabindex="-1"><a class="header-anchor" href="#流量控制规则-flowrule" aria-hidden="true">#</a> 流量控制规则 (FlowRule)</h3><h4 id="流量规则的定义" tabindex="-1"><a class="header-anchor" href="#流量规则的定义" aria-hidden="true">#</a> 流量规则的定义</h4><p>重要属性：</p><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>resource</td><td>资源名，资源名是限流规则的作用对象</td><td></td></tr><tr><td>count</td><td>限流阈值</td><td></td></tr><tr><td>grade</td><td>限流阈值类型，QPS 模式（1）或并发线程数模式（0）</td><td>QPS 模式</td></tr><tr><td>limitApp</td><td>流控针对的调用来源</td><td><code>default</code>，代表不区分调用来源</td></tr><tr><td>strategy</td><td>调用关系限流策略：直接、链路、关联</td><td>根据资源本身（直接）</td></tr><tr><td>controlBehavior</td><td>流控效果（直接拒绝/WarmUp/匀速+排队等待），不支持按调用关系限流</td><td>直接拒绝</td></tr><tr><td>clusterMode</td><td>是否集群限流</td><td>否</td></tr></tbody></table><p>同一个资源可以同时有多个限流规则，检查规则时会依次检查。</p><h4 id="通过代码定义流量控制规则" tabindex="-1"><a class="header-anchor" href="#通过代码定义流量控制规则" aria-hidden="true">#</a> 通过代码定义流量控制规则</h4><p>理解上面规则的定义之后，我们可以通过调用 <code>FlowRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则，比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initFlowQpsRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowRule</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FlowRule</span> rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlowRule</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// set limit qps to 20</span>
    rule<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rule<span class="token punctuation">.</span><span class="token function">setGrade</span><span class="token punctuation">(</span><span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">FLOW_GRADE_QPS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rule<span class="token punctuation">.</span><span class="token function">setLimitApp</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FlowRuleManager</span><span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),w={href:"https://github.com/alibaba/Sentinel/wiki/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6",target:"_blank",rel:"noopener noreferrer"},S=t(`<h3 id="熔断降级规则-degraderule" tabindex="-1"><a class="header-anchor" href="#熔断降级规则-degraderule" aria-hidden="true">#</a> 熔断降级规则 (DegradeRule)</h3><p>熔断降级规则包含下面几个重要的属性：</p><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>resource</td><td>资源名，即规则的作用对象</td><td></td></tr><tr><td>grade</td><td>熔断策略，支持慢调用比例/异常比例/异常数策略</td><td>慢调用比例</td></tr><tr><td>count</td><td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值</td><td></td></tr><tr><td>timeWindow</td><td>熔断时长，单位为 s</td><td></td></tr><tr><td>minRequestAmount</td><td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td><td>5</td></tr><tr><td>statIntervalMs</td><td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td><td>1000 ms</td></tr><tr><td>slowRatioThreshold</td><td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td><td></td></tr></tbody></table><p>同一个资源可以同时有多个降级规则。</p><p>理解上面规则的定义之后，我们可以通过调用 <code>DegradeRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initDegradeRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DegradeRule</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DegradeRule</span> rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DegradeRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rule<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token constant">KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// set threshold RT, 10 ms</span>
    rule<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rule<span class="token punctuation">.</span><span class="token function">setGrade</span><span class="token punctuation">(</span><span class="token class-name">RuleConstant</span><span class="token punctuation">.</span><span class="token constant">DEGRADE_GRADE_RT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rule<span class="token punctuation">.</span><span class="token function">setTimeWindow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DegradeRuleManager</span><span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),R={href:"https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7",target:"_blank",rel:"noopener noreferrer"},A=t(`<h3 id="系统保护规则-systemrule" tabindex="-1"><a class="header-anchor" href="#系统保护规则-systemrule" aria-hidden="true">#</a> 系统保护规则 (SystemRule)</h3><p>Sentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p>系统规则包含下面几个重要的属性：</p><table><thead><tr><th>Field</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>highestSystemLoad</td><td><code>load1</code> 触发值，用于触发自适应控制阶段</td><td>-1 (不生效)</td></tr><tr><td>avgRt</td><td>所有入口流量的平均响应时间</td><td>-1 (不生效)</td></tr><tr><td>maxThread</td><td>入口流量的最大并发数</td><td>-1 (不生效)</td></tr><tr><td>qps</td><td>所有入口资源的 QPS</td><td>-1 (不生效)</td></tr><tr><td>highestCpuUsage</td><td>当前系统的 CPU 使用率（0.0-1.0）</td><td>-1 (不生效)</td></tr></tbody></table><p>理解上面规则的定义之后，我们可以通过调用 <code>SystemRuleManager.loadRules()</code> 方法来用硬编码的方式定义流量控制规则。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initSystemRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SystemRule</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SystemRule</span> rule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rule<span class="token punctuation">.</span><span class="token function">setHighestSystemLoad</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rules<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SystemRuleManager</span><span class="token punctuation">.</span><span class="token function">loadRules</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),B={href:"https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81",target:"_blank",rel:"noopener noreferrer"},j=t('<h3 id="访问控制规则-authorityrule" tabindex="-1"><a class="header-anchor" href="#访问控制规则-authorityrule" aria-hidden="true">#</a> 访问控制规则 (AuthorityRule)</h3><p>很多时候，我们需要根据调用方来限制资源是否通过，这时候可以使用 Sentinel 的访问控制（黑白名单）的功能。黑白名单根据资源的请求来源（<code>origin</code>）限制资源是否通过，若配置白名单则只有请求来源位于白名单内时才可通过；若配置黑名单则请求来源位于黑名单时不通过，其余的请求通过。</p><p>授权规则，即黑白名单规则（<code>AuthorityRule</code>）非常简单，主要有以下配置项：</p><ul><li><code>resource</code>：资源名，即规则的作用对象</li><li><code>limitApp</code>：对应的黑名单/白名单，不同 origin 用 <code>,</code> 分隔，如 <code>appA,appB</code></li><li><code>strategy</code>：限制模式，<code>AUTHORITY_WHITE</code> 为白名单模式，<code>AUTHORITY_BLACK</code> 为黑名单模式，默认为白名单模式</li></ul>',4),C={href:"https://github.com/alibaba/Sentinel/wiki/%E9%BB%91%E7%99%BD%E5%90%8D%E5%8D%95%E6%8E%A7%E5%88%B6",target:"_blank",rel:"noopener noreferrer"},T=s("h3",{id:"热点规则-paramflowrule",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#热点规则-paramflowrule","aria-hidden":"true"},"#"),n(" 热点规则 (ParamFlowRule)")],-1),U={href:"https://github.com/alibaba/Sentinel/wiki/%E7%83%AD%E7%82%B9%E5%8F%82%E6%95%B0%E9%99%90%E6%B5%81",target:"_blank",rel:"noopener noreferrer"},D=t(`<h2 id="查询更改规则" tabindex="-1"><a class="header-anchor" href="#查询更改规则" aria-hidden="true">#</a> 查询更改规则</h2><p>引入了 transport 模块后，可以通过以下的 HTTP API 来获取所有已加载的规则：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8719/getRules?type=&lt;XXXX&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>type=flow</code> 以 JSON 格式返回现有的限流规则，degrade 返回现有生效的降级规则列表，system 则返回系统保护规则。</p><p>获取所有热点规则：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8719/getParamRules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="定制自己的持久化规则" tabindex="-1"><a class="header-anchor" href="#定制自己的持久化规则" aria-hidden="true">#</a> 定制自己的持久化规则</h2>`,7),F={href:"https://github.com/alibaba/Sentinel/blob/master/sentinel-extension/sentinel-datasource-extension/src/main/java/com/alibaba/csp/sentinel/datasource/AbstractDataSource.java",target:"_blank",rel:"noopener noreferrer"},N=s("code",null,"DataSource",-1),q={href:"https://github.com/alibaba/Nacos",target:"_blank",rel:"noopener noreferrer"},I=s("li",null,"结合 RDBMS、NoSQL、VCS 等来实现该规则",-1),P=s("li",null,"配合 Sentinel Dashboard 使用",-1),H={href:"https://github.com/alibaba/Sentinel/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%99%E6%89%A9%E5%B1%95",target:"_blank",rel:"noopener noreferrer"},O=t(`<h2 id="规则生效的效果" tabindex="-1"><a class="header-anchor" href="#规则生效的效果" aria-hidden="true">#</a> 规则生效的效果</h2><h3 id="判断限流降级异常" tabindex="-1"><a class="header-anchor" href="#判断限流降级异常" aria-hidden="true">#</a> 判断限流降级异常</h3><p>在 Sentinel 中所有流控降级相关的异常都是异常类 <code>BlockException</code> 的子类：</p><ul><li>流控异常：<code>FlowException</code></li><li>熔断降级异常：<code>DegradeException</code></li><li>系统保护异常：<code>SystemBlockException</code></li><li>热点参数限流异常：<code>ParamFlowException</code></li></ul><p>我们可以通过以下函数判断是否为 Sentinel 的流控降级异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BlockException</span><span class="token punctuation">.</span><span class="token function">isBlockException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了在业务代码逻辑上看到规则生效，我们也可以通过下面简单的方法，来校验规则生效的效果：</p>`,7),L=s("li",null,[s("strong",null,"暴露的 HTTP 接口"),n("：通过运行下面命令 "),s("code",null,"curl http://localhost:8719/cnode?id=<资源名称>"),n("，观察返回的数据。如果规则生效，在返回的数据栏中的 "),s("code",null,"block"),n(" 以及 "),s("code",null,"block(m)"),n(" 中会有显示")],-1),M=s("strong",null,"日志",-1),G={href:"https://github.com/alibaba/Sentinel/wiki/%E6%97%A5%E5%BF%97",target:"_blank",rel:"noopener noreferrer"},Q=t('<h3 id="block-事件" tabindex="-1"><a class="header-anchor" href="#block-事件" aria-hidden="true">#</a> block 事件</h3><p>Sentinel 提供以下扩展接口，可以通过 <code>StatisticSlotCallbackRegistry</code> 向 <code>StatisticSlot</code> 注册回调函数：</p><ul><li><code>ProcessorSlotEntryCallback</code>: callback when resource entry passed (<code>onPass</code>) or blocked (<code>onBlocked</code>)</li><li><code>ProcessorSlotExitCallback</code>: callback when resource entry successfully completed (<code>onExit</code>)</li></ul><p>可以利用这些回调接口来实现报警等功能，实时的监控信息可以从 <code>ClusterNode</code> 中实时获取。</p><h2 id="其它-api" tabindex="-1"><a class="header-anchor" href="#其它-api" aria-hidden="true">#</a> 其它 API</h2><h3 id="业务异常统计-tracer" tabindex="-1"><a class="header-anchor" href="#业务异常统计-tracer" aria-hidden="true">#</a> 业务异常统计 Tracer</h3><p>业务异常记录类 <code>Tracer</code> 用于记录业务异常。相关方法：</p><ul><li><code>traceEntry(Throwable, Entry)</code>：向传入 entry 对应的资源记录业务异常（非 <code>BlockException</code> 异常），异常数目为传入的 <code>count</code>。</li></ul><p>如果用户通过 <code>SphU</code> 或 <code>SphO</code> 手动定义资源，则 Sentinel 不能感知上层业务的异常，需要手动调用 <code>Tracer.trace(ex)</code> 来记录业务异常，否则对应的异常不会统计到 Sentinel 异常计数中。注意不要在 try-with-resources 形式的 <code>SphU.entry(xxx)</code> 中使用，否则会统计不上。</p><p>从 1.3.1 版本开始，注解方式定义资源支持自动统计业务异常，无需手动调用 <code>Tracer.trace(ex)</code> 来记录业务异常。Sentinel 1.3.1 以前的版本需要手动记录。</p><h3 id="上下文工具类-contextutil" tabindex="-1"><a class="header-anchor" href="#上下文工具类-contextutil" aria-hidden="true">#</a> 上下文工具类 ContextUtil</h3><p>相关静态方法：</p><p><strong>标识进入调用链入口（上下文）</strong>：</p><p>以下静态方法用于标识调用链路入口，用于区分不同的调用链路：</p><ul><li><code>public static Context enter(String contextName)</code></li><li><code>public static Context enter(String contextName, String origin)</code></li></ul><p>其中 <code>contextName</code> 代表调用链路入口名称（上下文名称），<code>origin</code> 代表调用来源名称。默认调用来源为空。返回值类型为 <code>Context</code>，即生成的调用链路上下文对象。</p><p>流控规则中若选择“流控方式”为“链路”方式，则入口资源名即为上面的 <code>contextName</code>。</p><p><strong>注意</strong>：</p><ul><li><code>ContextUtil.enter(xxx)</code> 方法仅在调用链路入口处生效，即仅在当前线程的初次调用生效，后面再调用不会覆盖当前线程的调用链路，直到 exit。<code>Context</code> 存于 ThreadLocal 中，因此切换线程时可能会丢掉，如果需要跨线程使用可以结合 <code>runOnContext</code> 方法使用。</li><li>origin 数量不要太多，否则内存占用会比较大。</li></ul><p><strong>退出调用链（清空上下文）</strong>：</p><ul><li><code>public static void exit()</code>：该方法用于退出调用链，清理当前线程的上下文。</li></ul><p><strong>获取当前线程的调用链上下文</strong>：</p><ul><li><code>public static Context getContext()</code>：获取当前线程的调用链路上下文对象。</li></ul><p><strong>在某个调用链上下文中执行代码</strong>：</p><ul><li><code>public static void runOnContext(Context context, Runnable f)</code>：常用于异步调用链路中 context 的变换。</li></ul><h2 id="dashboard" tabindex="-1"><a class="header-anchor" href="#dashboard" aria-hidden="true">#</a> Dashboard</h2>',26),W={href:"https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0",target:"_blank",rel:"noopener noreferrer"};function V(K,X){const a=c("ExternalLinkIcon");return p(),l("div",null,[u,d,s("p",null,[n("这篇文章主要介绍 Sentinel 核心库的使用。如果希望有一个最快最直接的了解，可以参考 "),s("a",r,[n("新手指南"),e(a)]),n(" 来获取一个最直观的感受。")]),k,s("p",null,[n("为了减少开发的复杂程度，我们对大部分的主流框架，例如 Web Servlet、Dubbo、Spring Cloud、gRPC、Spring WebFlux、Reactor 等都做了适配。您只需要引入对应的依赖即可方便地整合 Sentinel。可以参见: "),s("a",m,[n("主流框架的适配"),e(a)]),n("。")]),v,s("p",null,[n("注意 "),h,n(" 函数会在原方法被限流/降级/系统保护的时候调用，而 "),b,n(" 函数会针对所有类型的异常。请注意 "),y,n(" 和 "),g,n(" 函数的形式要求，更多指引可以参见 "),s("a",x,[n("Sentinel 注解支持文档"),e(a)]),n("。")]),f,s("p",null,[n("更详细的示例可以参考 Demo 中的 "),s("a",E,[n("AsyncEntryDemo"),e(a)]),n("，里面包含了普通资源与异步资源之间的各种嵌套示例。")]),_,s("p",null,[n("更多详细内容可以参考 "),s("a",w,[n("流量控制"),e(a)]),n("。")]),S,s("p",null,[n("更多详情可以参考 "),s("a",R,[n("熔断降级"),e(a)]),n("。")]),A,s("p",null,[n("注意系统规则只针对入口资源（EntryType=IN）生效。更多详情可以参考 "),s("a",B,[n("系统自适应保护文档"),e(a)]),n("。")]),j,s("p",null,[n("更多详情可以参考 "),s("a",C,[n("来源访问控制"),e(a)]),n("。")]),T,s("p",null,[n("详情可以参考 "),s("a",U,[n("热点参数限流"),e(a)]),n("。")]),D,s("p",null,[n("上面的规则配置，都是存在内存中的。即如果应用重启，这个规则就会失效。因此我们提供了开放的接口，您可以通过实现 "),s("a",F,[N,e(a)]),n(" 接口的方式，来自定义规则的存储数据源。通常我们的建议有：")]),s("ul",null,[s("li",null,[n("整合动态配置系统，如 ZooKeeper、"),s("a",q,[n("Nacos"),e(a)]),n("、Apollo 等，动态地实时刷新配置规则")]),I,P]),s("p",null,[n("更多详情请参考 "),s("a",H,[n("动态规则配置"),e(a)]),n("。")]),O,s("ul",null,[L,s("li",null,[M,n("：Sentinel 提供秒级的资源运行日志以及限流日志，详情可以参考: "),s("a",G,[n("日志"),e(a)])])]),Q,s("p",null,[n("详情请参考："),s("a",W,[n("Sentinel Dashboard 文档"),e(a)]),n("。")])])}const J=o(i,[["render",V],["__file","12-1686635365872.html.vue"]]);export{J as default};
