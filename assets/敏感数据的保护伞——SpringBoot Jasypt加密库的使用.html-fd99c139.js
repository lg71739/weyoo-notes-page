import{_ as e,r as p,o as c,c as i,d as n,e as s,b as t,f as o}from"./app-19e0b0f0.js";const l={},u=o(`<h1 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1 概述</h1><p>Jasypt是一个加密库，Github上有一个集成了Jasypt的Spring Boot库，叫jasypt-spring-boot，本文演示了如何使用该库对配置文件进行加密。</p><h1 id="_2-依赖" tabindex="-1"><a class="header-anchor" href="#_2-依赖" aria-hidden="true">#</a> 2 依赖</h1><p>首先添加依赖：.</p><p>Maven:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.ulisesbocchio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jasypt-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Gradle：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>implementation(&quot;com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_3-简单加密" tabindex="-1"><a class="header-anchor" href="#_3-简单加密" aria-hidden="true">#</a> 3 简单加密</h1><p>简单加密就是直接把加密口令（注意不是加密密码）以明文形式写在配置文件中，步骤如下：</p><ol><li>配置文件配置加密口令</li><li>获取密文</li><li>替换明文</li></ol><h2 id="_3-1-加密口令" tabindex="-1"><a class="header-anchor" href="#_3-1-加密口令" aria-hidden="true">#</a> 3.1 加密口令</h2><p>在配置文件加上如下参数：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">jasypt</span><span class="token punctuation">:</span>
  <span class="token key atrule">encryptor</span><span class="token punctuation">:</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中test就是加密的口令。</p><h2 id="_3-2-获取密文" tabindex="-1"><a class="header-anchor" href="#_3-2-获取密文" aria-hidden="true">#</a> 3.2 获取密文</h2><p>比如配置文件需要加密的值如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">plain</span><span class="token punctuation">:</span> value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在测试类对<code>StringEncryptor</code>进行注入并使用其中的encrypt加密通过<code>@Value</code>获取的值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">BaseEncryptTest</span> <span class="token punctuation">{</span>
	<span class="token comment">//其实直接@Autowired也可以</span>
	<span class="token comment">//但是如果有其他实现了StringEncryptor接口的Bean请使用@Resource指定</span>
    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;lazyJasyptStringEncryptor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">StringEncryptor</span> encryptor<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${plain}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> plain<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击旁边的绿色小三角形即可运行，输出如下：</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/15_15_36_23_202402151536364.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这个就是对应的密文。</p><h2 id="_3-3-替换明文" tabindex="-1"><a class="header-anchor" href="#_3-3-替换明文" aria-hidden="true">#</a> 3.3 替换明文</h2><p>把密文加上前缀<code>ENC(</code>与后缀<code>)</code>替换明文：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">cipher</span><span class="token punctuation">:</span> ENC(IlEvyvcULhZJrHLDtPun2ut433RvAdpaNJ9IZt9uNUk3hDSKQsdOXLEkWyiK6QR3)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样就完成了对属性plain进行加密，cipher就是加密后的内容。</p><h2 id="_3-4-测试" tabindex="-1"><a class="header-anchor" href="#_3-4-测试" aria-hidden="true">#</a> 3.4 测试</h2><p>直接通过@Value获取的值即为明文：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">BaseEncryptTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;lazyJasyptStringEncryptor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">StringEncryptor</span> encryptor<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${cipher}&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> cipher<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接运行其中的decrypt即可输出明文。</p><h1 id="_4-自定义加密" tabindex="-1"><a class="header-anchor" href="#_4-自定义加密" aria-hidden="true">#</a> 4 自定义加密</h1><h2 id="_4-1-自定义加密类" tabindex="-1"><a class="header-anchor" href="#_4-1-自定义加密类" aria-hidden="true">#</a> 4.1 自定义加密类</h2><p>默认采用的加密算法为PBE算法，如果觉得不能符合要求可以自定义加密类。<img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/15_15_41_54_202402151541346.png" alt="img" loading="lazy"></p><p>自定义加密类实现StringEncrypto接口即可，比如这里实现了一个非常简单的“加密”：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomEncryptor</span> <span class="token keyword">implements</span> <span class="token class-name">StringEncryptor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> message <span class="token operator">+</span> <span class="token string">&quot;111&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> encryptedMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> encryptedMessage<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>encryptedMessage<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;111&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加密很简单，直接在明文后面加上111，解密的话去掉111。另外在配置文件上写上Bean的名称：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">jasypt</span><span class="token punctuation">:</span>
  <span class="token key atrule">encryptor</span><span class="token punctuation">:</span>
    <span class="token key atrule">bean</span><span class="token punctuation">:</span> customEncryptor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomEncryptTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;customEncryptor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">StringEncryptor</span> encryptor<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${plain}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> plain<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${cipher}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cipher<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encryptor<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${plain}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> plain<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${cipher}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cipher<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encryptor<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2-非对称加密" tabindex="-1"><a class="header-anchor" href="#_4-2-非对称加密" aria-hidden="true">#</a> 4.2 非对称加密</h2><p>这里使用JDK自带的API去生成RSA的公钥和私钥：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generatePublicKeyAndPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">KeyPairGenerator</span> generator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    generator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">KeyPair</span> pair <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成后添加到jasypt.encryptor.public-key-string与jasypt.encryptor.private-key-string：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">jasypt</span><span class="token punctuation">:</span>
  <span class="token key atrule">encryptor</span><span class="token punctuation">:</span>
    <span class="token key atrule">public-key-string</span><span class="token punctuation">:</span> MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy+LfrlOK2yroXlYRl5rBp8DtYqpFuEhE3HgUL4Kcmp4D6eTcnqp3GDb7jmoljdXrkk8Gs+KvrG2pfVaArtrjzkcn73W9dmtAI//C4nYbieOvoSRWDHbbSb1iXPLQgYPQwheZ3tmjwt5fPC0feEEMeQUO4B1W0IoeeXDkkCkFI0mRMCPf0aPGlXVLNb5R8Zf35QAFZCpDtraNbxa+y5nl5bex0adByroKVEa3bUjBhJZrdgS7MZMJUgElyLbcAmunhFpRiXQXzCKRC+5JJNiDwyHuNj9qe3LUItNuorQSyGVfOekAqse0hB4SDPG3nchiXz43OOUl8Dudk28S8cIlcQIDAQAB
    <span class="token key atrule">private-key-string</span><span class="token punctuation">:</span> MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDL4t+uU4rbKuheVhGXmsGnwO1iqkW4SETceBQvgpyangPp5NyeqncYNvuOaiWN1euSTwaz4q+sbal9VoCu2uPORyfvdb12a0Aj/8LidhuJ46+hJFYMdttJvWJc8tCBg9DCF5ne2aPC3l88LR94QQx5BQ7gHVbQih55cOSQKQUjSZEwI9/Ro8aVdUs1vlHxl/flAAVkKkO2to1vFr7LmeXlt7HRp0HKugpURrdtSMGElmt2BLsxkwlSASXIttwCa6eEWlGJdBfMIpEL7kkk2IPDIe42P2p7ctQi026itBLIZV856QCqx7SEHhIM8bedyGJfPjc45SXwO52TbxLxwiVxAgMBAAECggEALC6JBcwVREqvSZgRnl57Fijk2DNpQdapU3RS/Xuqh4fz9aiyVVC/15e8mf8vDaYccxtcarlWE8G8z4wh/SIyaPY69XV4fdOedd6b4vqwm4gjPEJ1QiS0fu2DBfzZSaOgppq6LZRQnC8XiKEHl4XTF9uMfmzlLfIsSek4onO9KQjKYEtBHiEpn1CFePdxLkIBwS5RRjxB2cRwmhgzBuPCkUFSoBNPAonw+Esm5XQYMZhWFclQupgJ9tclQvDwoaoVqxi9jFFyS4Gr1lLTeYO+fRG+R3zsrnQM8CuYbhDY3kQOMH7qfKZxDqojyoKv+MYWyAlyJVR4vs5BBOo68pijhQKBgQDmbmyRFadurtym9fEUpp1ybdSYVL5Doo5c/VFyjQKqdAuC/GqLcGMvLBM9Hzu+MYRQnwzE3equ9/AB9vOtD24x2jbAKwDF1EDvAPqKhKfSgCW6l5/j+PvnJgl4JoxR81GhbCZorYtkszYwIGWT/1XspSTOrBpj2P0Dd5K8geBnDQKBgQDigmpjTvt1xlF2AiU/mwmXP803/auV1VcgbFk1IjVOmKkCDcf/TVkT3xcUNolBEadttRFuvwrZpOwXGuK0eFHRz1rrHVTy7WU4gD54Z257Fom7B+eO/jevA8hKA6o0JrtFWCzLPFv3UyKcolJLUBG2r4lVLRXszYOQO2keRpwe9QKBgCMXFblSTtjwD/Hs6fV3GerfBszbus2Z54wJl2mWR52lZktgHOl3B+ObFqLsKrDf4YJVdiBUmvRiFU53SMxF2UYGMOg6pDd8BxdeUsjdQqEvmo87n8GbnOCqTi7Zz+x63SdzzLWMF/oRwGK7zDwpWfBbhatjUfF6ja0FfHbwYDfRAoGAdYLTTtIbAu7wNBjI2kbEowMmpHWmHwWfPeL4JOiqXyw0AizEJV8rZ3PFtWbVrjxKcFAPyzSxnFhDY3k/RAFn8UFyGagN+jnO2ZEu16hRWOpIag+fwj+BA/siXcOo+YVegotMMeQOkjE/M6PCre/MQMqwpM/PIBs+tgUcc+iN9kECgYEAnbRQ+YsogfsNrYVNs1KH0XMCUOW6WfHmwbs0qDg77YdhYNHaDXdvEtBKdnnnXf4+NTYSYlKKm6I0siMW5DNGVsmhBglVwsNVUjkA55XSQodY8iba0Q8nbCcnh3QwNqPE3EDFwHAAZfTC6gLVV43LwkIKZObqNUPc+79iT4/tpes=
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsymmetricalEncryptTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${plain}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> plain<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${cipher}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> cipher<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;lazyJasyptStringEncryptor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">StringEncryptor</span> encryptor<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generatePublicKeyAndPrivateKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">KeyPairGenerator</span> generator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;RSA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        generator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">KeyPair</span> pair <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encryptor<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>plain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="_5-非明文口令" tabindex="-1"><a class="header-anchor" href="#_5-非明文口令" aria-hidden="true">#</a> 5 非明文口令</h1><p>对于jasypt.encryptor.password，可以使用非明文口令，这样口令的传递方式有三种：</p><ul><li>通过命令行参数传递</li><li>通过应用环境变量传递</li><li>通过系统环境变量传递</li></ul><h2 id="_5-1-通过命令行参数传递" tabindex="-1"><a class="header-anchor" href="#_5-1-通过命令行参数传递" aria-hidden="true">#</a> 5.1 通过命令行参数传递</h2><p>首先先写上明文口令：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">jasypt</span><span class="token punctuation">:</span>
  <span class="token key atrule">encryptor</span><span class="token punctuation">:</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> test
<span class="token key atrule">plain</span><span class="token punctuation">:</span> value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行测试后得到密文，加上前后缀替换明文后，去掉加密口令：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#jasypt:</span>
<span class="token comment">#  encryptor:</span>
<span class="token comment">#    password: test</span>
<span class="token comment">#plain: value</span>
<span class="token key atrule">cipher</span><span class="token punctuation">:</span> ENC(quCu1b+Z7SPHmgVsmbkeyNZmNe1LJw+SxjmwwLjNaWoH/ce3r6iHGvaMN5eQcu0P)

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并在测试类的参数类加上</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">--jasypt.encryptor.password</span><span class="token operator">=</span>test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/15_15_43_18_202402151543304.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>由于这里是测试类命令行参数添加不了，但是在启动类是可以添加的：</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/15_15_43_38_202402151543718.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这种方法就跳过演示了。</p><p>对于Gradle，测试的时候需要在build.gradle/build.gradle.kts添加参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>tasks<span class="token punctuation">.</span>withType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Test</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">jvmArgs</span><span class="token punctuation">(</span><span class="token string">&quot;-Djasypt.encryptor.password=test&quot;</span><span class="token punctuation">)</span>
    <span class="token comment">// 不能是jvmArgs(&quot;--jasypt.encryptor.password=test&quot;)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-2-通过应用环境变量传递" tabindex="-1"><a class="header-anchor" href="#_5-2-通过应用环境变量传递" aria-hidden="true">#</a> 5.2 通过应用环境变量传递</h2><p>和第一种方式差不多，第一种在Program arguments设置，而这种方法在VM options中设置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-Djasypt.encryptor.password</span><span class="token operator">=</span>test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/15_15_44_52_202402151544208.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/15_15_45_18_202402151545337.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_5-3-系统环境变量方式传递" tabindex="-1"><a class="header-anchor" href="#_5-3-系统环境变量方式传递" aria-hidden="true">#</a> 5.3 系统环境变量方式传递</h2><p>通过系统环境变量方式传递jasypt.encryptor.password时，需要指定是哪一个环境变量：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">jasypt</span><span class="token punctuation">:</span>
  <span class="token key atrule">encryptor</span><span class="token punctuation">:</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>ENCRYPT<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如这里指定的是ENCRYPT环境变量，设置好环境变量后就可以直接加密解密了。</p><h1 id="_6-部署注意事项" tabindex="-1"><a class="header-anchor" href="#_6-部署注意事项" aria-hidden="true">#</a> 6 部署注意事项</h1><h2 id="_6-1-打包" tabindex="-1"><a class="header-anchor" href="#_6-1-打包" aria-hidden="true">#</a> 6.1 打包</h2><p>因为在配置文件中缺少了jasypt.encryptor.password，因此使用Maven打包时会出错：</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/15_15_45_57_202402151545286.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在Maven打包配置中加上参数即可：</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/15_15_46_5_202402151546968.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是使用Gradle打包时不需要添加额外的参数。</p><h2 id="_6-2-部署" tabindex="-1"><a class="header-anchor" href="#_6-2-部署" aria-hidden="true">#</a> 6.2 部署</h2><p>现在一般通过JAR直接部署即可，也就是通过</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> demo.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>部署，这时候根据需要加上对应的参数即可，比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> demo.jar <span class="token parameter variable">--jasypt.encryptor.password</span><span class="token operator">=</span>test
<span class="token function">java</span> <span class="token parameter variable">-Djasypt.encryptor.password</span><span class="token operator">=</span>test <span class="token parameter variable">-jar</span> demo.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果通过系统变量获取加密口令，请确保对应的环境变量存在。</p><p>另外，如果通过Docker部署，请在ENTRYPOINT加上对应参数，比如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ENTRYPOINT [&quot;java&quot;,&quot;-Djasypt.encryptor.password=test&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;]
ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;,,&quot;--jasypt.encryptor.password=test&quot;,]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过系统环境变量获取请加上ENV：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ENV ENCRYPT=&quot;test&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_7-参考源码" tabindex="-1"><a class="header-anchor" href="#_7-参考源码" aria-hidden="true">#</a> 7 参考源码</h1><p>Java版：</p>`,91),r={href:"https://github.com/gkdgkdgkdgkd/SpringBootDemoJava/tree/main/Jasypt",target:"_blank",rel:"noopener noreferrer"},d={href:"https://gitee.com/jskdhfjksdhfjk/SpringBootDemoJava/tree/main/Jasypt",target:"_blank",rel:"noopener noreferrer"},k={href:"https://gitcode.net/qq_27525611/SpringBootDemoJava/-/tree/main/Jasypt",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"Kotlin版：",-1),m={href:"https://github.com/gkdgkdgkdgkd/SpringBootDemoKotlin/tree/main/Jasypt",target:"_blank",rel:"noopener noreferrer"},g={href:"https://gitee.com/jskdhfjksdhfjk/SpringBootDemoKotlin/tree/main/Jasypt",target:"_blank",rel:"noopener noreferrer"},b={href:"https://gitcode.net/qq_27525611/SpringBootDemoKotlin/-/tree/main/Jasypt",target:"_blank",rel:"noopener noreferrer"};function y(h,f){const a=p("ExternalLinkIcon");return c(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("Github"),t(a)])]),n("li",null,[n("a",d,[s("码云"),t(a)])]),n("li",null,[n("a",k,[s("GitCode"),t(a)])])]),v,n("ul",null,[n("li",null,[n("a",m,[s("Github"),t(a)])]),n("li",null,[n("a",g,[s("码云"),t(a)])]),n("li",null,[n("a",b,[s("GitCode"),t(a)])])])])}const w=e(l,[["render",y],["__file","敏感数据的保护伞——SpringBoot Jasypt加密库的使用.html.vue"]]);export{w as default};
