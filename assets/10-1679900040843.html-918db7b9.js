import{_ as o,r as t,o as a,c,d as r,e,b as p,f as i}from"./app-19e0b0f0.js";const s={},d=i('<h1 id="spring-security简介" tabindex="-1"><a class="header-anchor" href="#spring-security简介" aria-hidden="true">#</a> Spring Security简介</h1><h2 id="什么是spring-security" tabindex="-1"><a class="header-anchor" href="#什么是spring-security" aria-hidden="true">#</a> 什么是Spring Security？</h2><blockquote><p>springsecurity是一个功能强大且高度可定制的身份验证和访问控制框架。springsecurity是一个专注于为Java应用程序提供身份验证和授权的框架。与所有Spring项目一样，Spring安全性的真正威力在于它可以很容易地扩展以满足定制需求。</p></blockquote><p>实际上，在Spring boot出现之前，Spring security已经发展了很多年，到那时由于强大的shiro，它一直不温不火。因为相对于Shiro，在SSH/SSM中整合Spring Security都是比较麻烦的操作，然而自从有了 Spring Boot 之后，Spring Boot 对于 Spring Security 提供了 自动化配置方案，可以零配置使用 Spring Security。</p><p>所以一般的推荐方案是：</p><ul><li>SSM + Shiro</li><li>Spring boot/Spring Cloud + Spring Security</li></ul><h2 id="权限管理" tabindex="-1"><a class="header-anchor" href="#权限管理" aria-hidden="true">#</a> 权限管理</h2><p>基本上涉及到用户参与的系统都要进行权限管理，权限管理属于系统安全的范畴，权限管理实现<code>对用户访问系统的控制</code>，按照<code>安全规则</code>或者<code>安全策略</code>控制用户<code>可以访问而且只能访问自己被授权的资源</code>。</p><p>权限管理包括用户<strong>身份认证</strong>和<strong>授权</strong>两部分，简称<strong>认证授权</strong>。对于需要访问控制的资源用户首先经过身份认证，认证通过后用户具有该资源的访问权限方可访问。</p><h3 id="认证" tabindex="-1"><a class="header-anchor" href="#认证" aria-hidden="true">#</a> 认证</h3>',10),h=r("strong",null,[r("code",null,"身份认证")],-1),S={href:"http://baike.baidu.com/view/5628.htm",target:"_blank",rel:"noopener noreferrer"},l=i('<h3 id="授权" tabindex="-1"><a class="header-anchor" href="#授权" aria-hidden="true">#</a> 授权</h3><p><strong><code>授权</code></strong>，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h3><p>和其他领域不同，在 Java 企业级开发中，安全管理框架非常少，目前比较常见的就是：</p><ul><li><p>Shiro</p><p>Shiro 本身是一个老牌的安全管理框架，有着众多的优点，例如轻量、简单、易于集成、可以在JavaSE环境中使用等。不过，在微服务时代，Shiro 就显得力不从心了，在微服务面前和扩展方面，无法充分展示自己的优势。</p></li><li><p>开发者自定义</p><p>也有很多公司选择自定义权限，即自己开发权限管理。但是一个系统的安全，不仅仅是登录和权限控制这么简单，我们还要考虑种各样可能存在的网络政击以及防彻策略，从这个角度来说，开发者白己实现安全管理也并非是一件容易的事情，只有大公司才有足够的人力物力去支持这件事情。</p></li><li><p>Spring Security</p><p>Spring Security,作为spring 家族的一员，在和 Spring 家族的其他成员如 Spring Boot Spring Clond等进行整合时，具有其他框架无可比拟的优势，同时对 OAuth2 有着良好的支持，再加上Spring Cloud对 Spring Security的不断加持（如推出 Spring Cloud Security )，让 Spring Securiy 不知不觉中成为微服务项目的首选安全管理方案。</p></li></ul>',5);function u(g,_){const n=t("ExternalLinkIcon");return a(),c("div",null,[d,r("p",null,[h,e(" ，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。对于采用"),r("a",S,[e("指纹"),p(n)]),e("等系统，则出示指纹；对于硬件Key等刷卡系统，则需要刷卡。")]),l])}const f=o(s,[["render",u],["__file","10-1679900040843.html.vue"]]);export{f as default};
