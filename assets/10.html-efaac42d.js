import{_ as r,r as l,o as p,c as t,d as i,e,b as s,f as a}from"./app-19e0b0f0.js";const o={},h=a('<h1 id="jenkins简介" tabindex="-1"><a class="header-anchor" href="#jenkins简介" aria-hidden="true">#</a> Jenkins简介</h1><h2 id="什么是jenkins" tabindex="-1"><a class="header-anchor" href="#什么是jenkins" aria-hidden="true">#</a> 什么是Jenkins</h2><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/11_17_4_31_202402111704853.jpeg" alt="jenkins" tabindex="0" loading="lazy"><figcaption>jenkins</figcaption></figure><p>Jenkins 是一款流行的开源持续集成（Continuous Integration）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成编程可能。</p>',4),c={href:"http://jenkins-ci.org",target:"_blank",rel:"noopener noreferrer"},d=a('<h3 id="jenkins的特征" tabindex="-1"><a class="header-anchor" href="#jenkins的特征" aria-hidden="true">#</a> Jenkins的特征</h3><ul><li><p>开源的Java语言开发持续集成工具，支持持续集成，持续部署。</p></li><li><p>易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</p></li><li><p>消息通知及测试报告：集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit/TestNG测试报告。</p></li><li><p>分布式构建：支持Jenkins能够让多台计算机一起构建/测试。</p></li><li><p>文件识别：Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</p></li><li><p>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven，docker等。</p></li></ul><h3 id="jenkins的由来" tabindex="-1"><a class="header-anchor" href="#jenkins的由来" aria-hidden="true">#</a> Jenkins的由来</h3><p>目前持续集成(CI)已成为当前许多软件开发团队在整个软件开发生命周期内侧重于保证代码质量的常见做法。它是一种实践，旨在缓和和稳固软件的构建过程。并且能够帮助您的开发团队应对如下挑战：</p><ul><li><p>软件构建自动化</p><p>配置完成后，CI系统会依照预先制定的时间表，或者针对某一特定事件，对目标软件进行构建。</p></li><li><p>构建可持续的自动化检查<br> CI系统能持续地获取新增或修改后签入的源代码，也就是说，当软件开发团队需要周期性的检查新增或修改后的代码时，CI系统会不断确认这些新代码是否破坏了原有软件的成功构建。这减少了开发者们在检查彼此相互依存的代码中变化情况需要花费的时间和精力(说直接一点也是钱啊，呵呵)。</p></li><li><p>构建可持续的自动化测试<br> 构建检查的扩展部分，构建后执行预先制定的一套测试规则，完成后触发通知(Email,RSS等等)给相关的当事人。</p></li><li><p>生成后后续过程的自动化<br> 当自动化检查和测试成功完成，软件构建的周期中可能也需要一些额外的任务，诸如生成文档、打包软件、部署构件到一个运行环境或者软件仓库。这样，构件才能更迅速地提供给用户使用。</p></li></ul><h2 id="基本概念——持续集成" tabindex="-1"><a class="header-anchor" href="#基本概念——持续集成" aria-hidden="true">#</a> 基本概念——持续集成</h2><h3 id="软件开发生命周期" tabindex="-1"><a class="header-anchor" href="#软件开发生命周期" aria-hidden="true">#</a> 软件开发生命周期</h3><p>软件开发生命周期又叫做SDLC（Software Development Life Cycle），它是集合了计划、开发、测试和部署过程的集合。</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/11_17_35_8_202402111735507.png" alt="image-20240211173508462" tabindex="0" loading="lazy"><figcaption>image-20240211173508462</figcaption></figure><ul><li><p><strong>计划和需求分析 (Planning and Requirement Analysis)</strong></p><p>每个软件开发生命周期模型都从分析开始，过程的利益相关者<br> 讨论对最终产品的要求。此阶段的目标是系统要求的详细定义。此外，还需要确保所有流程参与者都清楚地了解任务以及每个需求将如何实施。通常，讨论涉及质量保证专家，如果有必要，他们甚至可以在开发阶段干预过程中的添加。</p></li><li><p><strong>设计项目架构 (Project Architecture)</strong></p><p>在软件开发生命周期的第二阶段，开发人员实际上正在设计架构。所有利益相关者（包括客户）都会讨论此阶段可能出现的所有不同技术问题。此外，还定义了项目中使用的技术，团队负载，限制，时间范围和预算。最合适的项目决策是根据定义的要求做出的。</p></li><li><p><strong>开发和编程 (Development and Coding)</strong></p><p>在批准要求后，该过程进入下一阶段 - 实际开发。程序员从这里开始编写源代码，同时牢记先前定义的需求。系统管理员调整软件环境，前端程序员开发程序的用户界面以及与服务器交互的逻辑。<br> 编程本身假设有四个阶段</p><ul><li>算法开发</li><li>源代码编写</li><li>汇编</li><li>测试和调试</li></ul></li><li><p><strong>测试 (Testing)</strong></p><p>测试阶段包括调试过程。开发过程中遗漏的所有代码缺陷都会在此处检测到，记录下来并传回给开发人员进行修复。重复测试过程，直到删除所有关键问题并且软件工作流程稳定。</p></li><li><p><strong>部署 (Deployment)</strong></p><p>当程序最终确定并且没有关键问题时 - 是时候为最终用户启动它了。新程序版本发布后，技术支持团队加入。该部门提供用户反馈; 在利用期间咨询和支持用户。此外，此阶段还包括所选组件的更新，以确保软件是最新的，并且不会受到安全漏洞的影响。</p></li></ul><h3 id="什么是持续集成" tabindex="-1"><a class="header-anchor" href="#什么是持续集成" aria-hidden="true">#</a> 什么是持续集成</h3><p>持续集成（ Continuous integration ， 简称 CI ）指的是，频繁地（一天多次）将代码集成到主干。</p><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p><p>通过持续集成， 团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。</p><h3 id="持续集成的流程" tabindex="-1"><a class="header-anchor" href="#持续集成的流程" aria-hidden="true">#</a> 持续集成的流程</h3><p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p><ul><li>提交</li></ul><p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交 （commit）。</p><ul><li>测试（第一轮）</li></ul><p>代码仓库对commit操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p><ul><li>构建</li></ul><p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。</p><p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实 际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等。</p><ul><li>测试（第二轮）</li></ul><p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时 构建步骤也要移到第一轮测试前面。</p><ul><li>部署</li></ul><p>过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包( tar ﬁlename.tar * ）存档，发到生产服务器。</p><ul><li>回滚</li></ul><p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指 向上一个版本的目录。</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/11_17_43_9_202402111743852.png" alt="image-20240211174309811" tabindex="0" loading="lazy"><figcaption>image-20240211174309811</figcaption></figure><h3 id="持续集成的组成要素" tabindex="-1"><a class="header-anchor" href="#持续集成的组成要素" aria-hidden="true">#</a> 持续集成的组成要素</h3><p>一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、 测试统计等都是自动完成的， 无需人工干预。</p><p>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用SVN或Git。</p><p>一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/11_17_41_32_202402111741317.png" alt="image-20240211174132278" tabindex="0" loading="lazy"><figcaption>image-20240211174132278</figcaption></figure><h3 id="持续集成的好处" tabindex="-1"><a class="header-anchor" href="#持续集成的好处" aria-hidden="true">#</a> 持续集成的好处</h3><p>1、降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；</p><p>2、对系统健康持续检查，减少发布风险带来的问题；</p><p>3、减少重复性工作；</p><p>4、持续部署，提供可部署单元包；</p><p>5、持续交付可供使用的版本；</p><p>6、增强团队信心；</p>',42);function u(g,m){const n=l("ExternalLinkIcon");return p(),t("div",null,[h,i("blockquote",null,[i("p",null,[e("官网： "),i("a",c,[e("http://jenkins-ci.org"),s(n)])])]),d])}const _=r(o,[["render",u],["__file","10.html.vue"]]);export{_ as default};
