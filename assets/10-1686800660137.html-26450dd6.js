import{_ as a,o as e,c as i,f as r}from"./app-19e0b0f0.js";const t={},s=r('<h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>Redis是一个开源的，就是一种运行速度很快，并发很强的跑在内存上的NoSql数据库，以key- -value键值对的存储服务系统。</p><p>支持多种数据结构,它支持存储的 value类型相对更多,包括 string(字符串) list(链表)、set(集合)、 zsetsorted set--有序集合和hash(哈希类型)</p><p>这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作, 而且这些操作都是原子性的。</p><p>在此基础上, Redis支持各种不同方式的排序。</p><p>与 memcached一样,为了保证效率,数据都是缓存在内存中。区别的是 Redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记 录文件。</p><h2 id="redis特性" tabindex="-1"><a class="header-anchor" href="#redis特性" aria-hidden="true">#</a> Redis特性</h2><h3 id="速度快" tabindex="-1"><a class="header-anchor" href="#速度快" aria-hidden="true">#</a> <strong>速度快</strong></h3><p>数据存储在内存中，使用C语言实现，单线程模型，最高支持10W OPS。</p><p>为什么速度快？首先，采用了多路复用io阻塞机制，然后，数据结构简单，操作节省时间，最后，运行在内存中，自然速度快</p><h3 id="持久化" tabindex="-1"><a class="header-anchor" href="#持久化" aria-hidden="true">#</a> <strong>持久化</strong></h3><p>由于内存断电后会丢失数据，Redis会对数据的更新异步保存在磁盘上</p><h3 id="多种数据结构" tabindex="-1"><a class="header-anchor" href="#多种数据结构" aria-hidden="true">#</a> <strong>多种数据结构</strong></h3><p>常见数据结构：字符串、哈希、List、Set等</p><p>衍生数据结构：位图(BitMaps)、HyperLoglog(超小内存唯一值计数)、GEO(地理位置定位)</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/06/15_13_45_57_6a92b046-43c1-42a8-81fe-59933ba916c9.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="支持多种编程语言" tabindex="-1"><a class="header-anchor" href="#支持多种编程语言" aria-hidden="true">#</a> <strong>支持多种编程语言</strong></h3><p>Java、PHP、Python、Ruby等</p><h3 id="丰富功能" tabindex="-1"><a class="header-anchor" href="#丰富功能" aria-hidden="true">#</a> <strong>丰富功能</strong></h3><p>①发布订阅：实现基于消息的功能<br> ②Luau脚本：实现自定义的命令</p><p>③支持简单事务</p><p>④Pipeline：提高客户端的并发效率</p><h3 id="简单-代码短小精悍" tabindex="-1"><a class="header-anchor" href="#简单-代码短小精悍" aria-hidden="true">#</a> 简单：代码短小精悍</h3><p>①不依赖外部库</p><p>②单线程模型</p><h3 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制" aria-hidden="true">#</a> <strong>主从复制</strong></h3><p>为分布式提供一定的基础</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/06/15_14_28_8_15_13_47_29_fa56ffee-6189-4b98-9193-1ea879113f38.jpg.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="高可用、分布式" tabindex="-1"><a class="header-anchor" href="#高可用、分布式" aria-hidden="true">#</a> <strong>高可用、分布式</strong></h3><p>v2.8开始支持Redis-Sentinel（哨兵）高可用</p><p>v3.0开始支持Redis-Cluster 分布式</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/06/15_13_47_41_7a4e2746-28e4-4213-8b16-a12e455d8170.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="redis典型使用场景" tabindex="-1"><a class="header-anchor" href="#redis典型使用场景" aria-hidden="true">#</a> Redis典型使用场景</h2><ol><li><strong>缓存系统:</strong></li></ol><p>当用户请求数据时，如果Redis中有该数据， 就直接返回该数据；如果没有，则到Storage中进行查询，并将查询结果保存到Redis中，同时将Storage查询结果返回给用户。</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/06/15_13_47_59_d726fb0b-3f5c-4d93-b8a5-ffdf3919b5a6.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol start="2"><li><strong>计数器:</strong></li></ol><p>常见的转发数、评论数都可以通过Redis实现，Redis的increase命令在单线程下可以高效稳定的统计数目</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/06/15_13_48_16_4985b518-bb53-4b96-9364-f716c77bc4be.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol start="3"><li><strong>消息队列系统</strong></li></ol><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/06/15_13_48_26_807362e8-1e1a-4884-a7d2-7b2be8ee36de.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol start="4"><li><strong>排行榜:</strong></li></ol><p>Redis提供有序队列的形式，可以方便的实现排行榜功能</p><ul><li><p><strong>社交网络:</strong></p><p>社交网络中的常见功能，如粉丝数、订阅数、相互关注、时间轴功能等</p></li><li><p><strong>实时系统:</strong></p><p>垃圾邮件处理系统、过滤系统等</p></li><li><p><strong>数据过期处理:</strong></p><p>可以精确到毫秒级别</p></li><li><p><strong>任务队列:</strong></p><p>秒杀、抢购、12306等等</p></li><li><p><strong>session分离:</strong></p><p>多用于分布式集群架构中</p></li></ul><h2 id="nosql数据库" tabindex="-1"><a class="header-anchor" href="#nosql数据库" aria-hidden="true">#</a> NOSQL数据库</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>NoSQL(NoSQL = Not Only SQL )，意即“不仅仅是SQL”，泛指非关系型的数据库。</p><p>NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</p><ul><li><p>不遵循SQL标准。</p></li><li><p>不支持ACID (原子性、一致性、隔离性、持久性)。</p></li><li><p>远超于SQL的性能。</p></li></ul><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h3><ul><li>对数据高并发的读写</li><li>海量数据的读写</li><li>对数据高可扩展性的</li></ul><h3 id="不适用场景" tabindex="-1"><a class="header-anchor" href="#不适用场景" aria-hidden="true">#</a> 不适用场景</h3><ul><li>需要事务支持</li><li>基于sql的结构化查询存储，处理复杂的关系,需要即席查询。</li><li>用不着sql的和用了sql也不行的情况，请考虑用NoSql</li></ul><h3 id="常见nosql数据库" tabindex="-1"><a class="header-anchor" href="#常见nosql数据库" aria-hidden="true">#</a> 常见NOSQL数据库</h3><table><thead><tr><th>名称</th><th><strong>优缺点</strong></th></tr></thead><tbody><tr><td><strong>Memcache</strong></td><td>很早出现的NoSql数据库数据都在内存中，一般不持久化<br>支持简单的key-value模式，支持类型单一<br>一般是作为缓存数据库辅助持久化的数据库</td></tr><tr><td><strong>Redis</strong></td><td>几乎覆盖了Memcached的绝大部分功能<br>数据都在内存中，支持持久化，主要用作备份恢复<br>除了支持简单的key-value模式，还支持多种数据结构的存储，比如 list、set、hash、zset等。<br>一般是作为缓存数据库辅助持久化的数据库</td></tr><tr><td><strong>MongoDB</strong></td><td>高性能、开源、模式自由(schema free)的<strong>文档型数据库</strong><br>数据都在内存中， 如果内存不足，把不常用的数据保存到硬盘<br>虽然是key-value模式，但是对value（尤其是<strong>json</strong>）提供了丰富的查询功能<br>支持二进制数据及大型对象可以根据数据的特点<strong>替代RDBMS</strong> ，成为独立的数据库。或者配合RDBMS，存储特定的数据。</td></tr></tbody></table>',56),d=[s];function n(h,o){return e(),i("div",null,d)}const g=a(t,[["render",n],["__file","10-1686800660137.html.vue"]]);export{g as default};
