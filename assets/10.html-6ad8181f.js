import{_ as a,o as e,c as i,f as r}from"./app-19e0b0f0.js";const t={},c=r('<figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/02/3_17_7_6_e660ab7de59f8164756f3495362857ff.png" alt="传统方式" tabindex="0" loading="lazy"><figcaption>传统方式</figcaption></figure><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/02/3_17_7_47_3_17_7_35_3_17_7_32_0e586dc1d0b8c9c693cc59ad0bacf014.png" alt="组件方式" tabindex="0" loading="lazy"><figcaption>组件方式</figcaption></figure><h2 id="_1-1-模块" tabindex="-1"><a class="header-anchor" href="#_1-1-模块" aria-hidden="true">#</a> 1.1 模块</h2><p>理解：向外提供特定功能的 js 程序，一般就是一个 js 文件<br> 为什么：js 文件很多很复杂<br> 作用：复用 js，简化 js 的编写，提高 js 运行效率</p><h2 id="_1-2-组件" tabindex="-1"><a class="header-anchor" href="#_1-2-组件" aria-hidden="true">#</a> 1.2. 组件</h2><p>定义：用来实现局部功能的代码和资源的集合（html/css/js/image…）<br> 为什么：一个界面的功能很复杂<br> 作用：复用编码，简化项目编码，提高运行效率</p><h2 id="_1-3-模块化" tabindex="-1"><a class="header-anchor" href="#_1-3-模块化" aria-hidden="true">#</a> 1.3. 模块化</h2><p>当应用中的 js 都以模块来编写的，那这个应用就是一个模块化的应用</p><h2 id="_1-4-组件化" tabindex="-1"><a class="header-anchor" href="#_1-4-组件化" aria-hidden="true">#</a> 1.4. 组件化</h2><p>当应用中的功能都是多组件的方式来编写的，那这个应用就是一个组件化的应用</p>',10),s=[c];function _(h,d){return e(),i("div",null,s)}const o=a(t,[["render",_],["__file","10.html.vue"]]);export{o as default};
