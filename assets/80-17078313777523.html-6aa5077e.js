import{_ as a,o as e,c as s,f as n}from"./app-19e0b0f0.js";const i={},t=n(`<h1 id="打tag" tabindex="-1"><a class="header-anchor" href="#打tag" aria-hidden="true">#</a> 打Tag</h1><p>Git 可以给历史中的某一个提交打上标签，以示重要。比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）</p><h2 id="列出标签" tabindex="-1"><a class="header-anchor" href="#列出标签" aria-hidden="true">#</a> 列出标签</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag
<span class="token function">git</span> tag <span class="token parameter variable">-l</span> <span class="token string">&#39;v1.8.5*&#39;</span>
<span class="token comment"># v1.8.5 v1.8.5-rc0 v1.8.5-rc1 v1.8.5-rc2 v1.8.5-rc3 v1.8.5.1 v1.8.5.2 v1.8.5.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建标签" tabindex="-1"><a class="header-anchor" href="#创建标签" aria-hidden="true">#</a> 创建标签</h2><p>Git 使用两种主要类型的标签：<strong>轻量标签</strong>与<strong>附注标签</strong>。<strong>轻量标签</strong>很像一个不会改变的分支，它只是一个特定提交的引用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag v1.0
<span class="token function">git</span> tag v1.0 commitHash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/14_10_33_17_202402141033940.png" alt="image-20211001135004802" tabindex="0" loading="lazy"><figcaption>image-20211001135004802</figcaption></figure><p><strong>附注标签</strong>是存储在 Git 数据库中的一个完整对象。它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；<mark>通常建议创建附注标签，这样你可以拥有以上所有信息；但是如果你只是想用一个临时的标签，或者因为某些原因不想要保存那些信息，轻量标签也是可用的</mark></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.4 
<span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.4 commitHash
<span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.4 commitHash <span class="token parameter variable">-m</span> &#39;my version <span class="token number">1.4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查看特定标签" tabindex="-1"><a class="header-anchor" href="#查看特定标签" aria-hidden="true">#</a> 查看特定标签</h2><p><code>git show</code>可以显示任意类型的对象</p><ul><li>git 对象</li><li>树对象</li><li>提交对象</li><li>tag 对象</li></ul><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/14_10_33_23_202402141033476.png" alt="image-20211001135100644" tabindex="0" loading="lazy"><figcaption>image-20211001135100644</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> show tagname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/14_10_33_29_202402141033607.png" alt="image-20211001135139427" tabindex="0" loading="lazy"><figcaption>image-20211001135139427</figcaption></figure><h2 id="远程标签" tabindex="-1"><a class="header-anchor" href="#远程标签" aria-hidden="true">#</a> 远程标签</h2><p>默认情况下，<code>git push</code>命令并不会传送标签到远程仓库服务器上。在创建完标签后你必须显式地推送标签到共享服务器上。你可以运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin <span class="token punctuation">[</span>tagname<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想要一次性推送很多标签，也可以使用带有<code>--tags</code>选项的<code>git push</code>命令。这将会把所有不在远程仓库服务器上的标签全部传送到那里</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin <span class="token parameter variable">--tags</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="删除标签" tabindex="-1"><a class="header-anchor" href="#删除标签" aria-hidden="true">#</a> 删除标签</h2><p>删除标签 要删除掉你本地仓库上的标签，可以使用命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>tagname<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，可以使用下面的命令删除掉一个轻量级标签：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> tag <span class="token parameter variable">-d</span> v1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/14_10_33_35_202402141033206.png" alt="image-20211001135533025" tabindex="0" loading="lazy"><figcaption>image-20211001135533025</figcaption></figure><p>应该注意的是上述命令并不会从任何远程仓库中移除这个标签，你必须使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token operator">&lt;</span>remote<span class="token operator">&gt;</span> :refs/tags/<span class="token operator">&lt;</span>tagname<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来更新你的远程仓库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin :refs/tags/v1.4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="检出标签" tabindex="-1"><a class="header-anchor" href="#检出标签" aria-hidden="true">#</a> 检出标签</h2><p>如果你想查看某个标签所指向的文件版本，可以使用<code>git checkout</code>命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout tagname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/14_10_33_41_202402141033942.png" alt="image-20211001135353545" tabindex="0" loading="lazy"><figcaption>image-20211001135353545</figcaption></figure><p>虽然说这会使你的仓库处于“分离头指针（detacthed HEAD）”状态。在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化，但你的新提交将不属于任何分支，并且将无法访问，除非访问确切的提交哈希。因此，如果你需要进行更改——比如说你正在修复旧版本的错误——这通常需要创建一个新分支：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> version2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/14_10_40_31_202402141040175.png" alt="image-20211001135500060" tabindex="0" loading="lazy"><figcaption>image-20211001135500060</figcaption></figure>`,38),r=[t];function d(c,l){return e(),s("div",null,r)}const p=a(i,[["render",d],["__file","80-17078313777523.html.vue"]]);export{p as default};
