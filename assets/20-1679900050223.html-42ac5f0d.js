import{_ as a,o as n,c as e,f as s}from"./app-19e0b0f0.js";const i={},t=s(`<h1 id="整体架构" tabindex="-1"><a class="header-anchor" href="#整体架构" aria-hidden="true">#</a> 整体架构</h1><p>在的架构设计中，<strong><code>认证</code><strong>和</strong><code>授权</code></strong> 是分开的，无论使用什么样的认证方式。都不会影响授权，这是两个独立的存在，这种独立带来的好处之一，就是可以非常方便地整合一些外部的解决方案。</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/27_15_43_19_image-20220110112541559.png" alt="image-20220110112541559" tabindex="0" loading="lazy"><figcaption>image-20220110112541559</figcaption></figure><h2 id="认证" tabindex="-1"><a class="header-anchor" href="#认证" aria-hidden="true">#</a> 认证</h2><h3 id="authenticationmanager" tabindex="-1"><a class="header-anchor" href="#authenticationmanager" aria-hidden="true">#</a> AuthenticationManager</h3><p>在Spring Security中认证是由<code>AuthenticationManager</code>接口来负责的，接口定义为：</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/27_15_43_10_image-20220110104531129.png" alt="image-20220110104531129" tabindex="0" loading="lazy"><figcaption>image-20220110104531129</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AuthenticationManager</span> <span class="token punctuation">{</span> 
    <span class="token class-name">Authentication</span> <span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>返回 Authentication 表示认证成功</li><li>返回 AuthenticationException 异常，表示认证失败。</li></ul><p>AuthenticationManager 主要实现类为 ProviderManager，在 ProviderManager 中管理了众多 AuthenticationProvider 实例。</p><p>在一次完整的认证流程中，Spring Security 允许存在多个 AuthenticationProvider ，用来实现多种认证方式，这些 AuthenticationProvider 都是由 ProviderManager 进行统一管理的。</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/27_15_43_12_image-20220110103518334.png" alt="image-20220110103518334" tabindex="0" loading="lazy"><figcaption>image-20220110103518334</figcaption></figure><h3 id="authentication" tabindex="-1"><a class="header-anchor" href="#authentication" aria-hidden="true">#</a> Authentication</h3><p>认证以及认证成功的信息主要是由 Authentication 的实现类进行保存的，其接口定义为：</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/27_15_43_13_image-20220110104815645.png" alt="image-20220110104815645" tabindex="0" loading="lazy"><figcaption>image-20220110104815645</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Authentication</span> <span class="token keyword">extends</span> <span class="token class-name">Principal</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> <span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> <span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> <span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isAuthenticated<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>getAuthorities 获取用户权限信息</li><li>getCredentials 获取用户凭证信息，一般指密码</li><li>getDetails 获取用户详细信息</li><li>getPrincipal 获取用户身份信息，用户名、用户对象等</li><li>isAuthenticated 用户是否认证成功</li></ul><h3 id="securitycontextholder" tabindex="-1"><a class="header-anchor" href="#securitycontextholder" aria-hidden="true">#</a> SecurityContextHolder</h3><p>SecurityContextHolder 用来获取登录之后用户信息。Spring Security 会将登录用户数据保存在 Session 中。但是，为了使用方便,Spring Security在此基础上还做了一些改进，其中最主要的一个变化就是线程绑定。当用户登录成功后,Spring Security 会将登录成功的用户信息保存到 SecurityContextHolder 中。SecurityContextHolder 中的数据保存默认是通过ThreadLocal 来实现的，使用 ThreadLocal 创建的变量只能被当前线程访问，不能被其他线程访问和修改，也就是用户数据和请求线程绑定在一起。当登录请求处理完毕后，Spring Security 会将 SecurityContextHolder 中的数据拿出来保存到 Session 中，同时将 SecurityContexHolder 中的数据清空。以后每当有请求到来时，Spring Security 就会先从 Session 中取出用户登录数据，保存到 SecurityContextHolder 中，方便在该请求的后续处理过程中使用，同时在请求结束时将 SecurityContextHolder 中的数据拿出来保存到 Session 中，然后将 Security SecurityContextHolder 中的数据清空。这一策略非常方便用户在 Controller、Service 层以及任何代码中获取当前登录用户数据。</p><h2 id="授权" tabindex="-1"><a class="header-anchor" href="#授权" aria-hidden="true">#</a> 授权</h2><p>当完成认证后，接下米就是授权了。在 Spring Security 的授权体系中，有两个关键接口，</p><h3 id="accessdecisionmanager" tabindex="-1"><a class="header-anchor" href="#accessdecisionmanager" aria-hidden="true">#</a> AccessDecisionManager</h3><blockquote><p>AccessDecisionManager (访问决策管理器)，用来决定此次访问是否被允许。</p></blockquote><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/27_15_43_13_image-20220110110946267.png" alt="image-20220110110946267" tabindex="0" loading="lazy"><figcaption>image-20220110110946267</figcaption></figure><h3 id="accessdecisionvoter" tabindex="-1"><a class="header-anchor" href="#accessdecisionvoter" aria-hidden="true">#</a> AccessDecisionVoter</h3><blockquote><p>AccessDecisionVoter (访问决定投票器)，投票器会检查用户是否具备应有的角色，进而投出赞成、反对或者弃权票。</p></blockquote><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/27_15_43_12_image-20220110111011018.png" alt="image-20220110111011018" tabindex="0" loading="lazy"><figcaption>image-20220110111011018</figcaption></figure><p>AccesDecisionVoter 和 AccessDecisionManager 都有众多的实现类，在 AccessDecisionManager 中会换个遍历 AccessDecisionVoter，进而决定是否允许用户访问，因而 AaccesDecisionVoter 和 AccessDecisionManager 两者的关系类似于 AuthenticationProvider 和 ProviderManager 的关系。</p><h3 id="configattribute" tabindex="-1"><a class="header-anchor" href="#configattribute" aria-hidden="true">#</a> ConfigAttribute</h3><blockquote><p>ConfigAttribute，用来保存授权时的角色信息</p></blockquote><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/27_15_43_52_image-20220110111037603.png" alt="image-20220110111037603" tabindex="0" loading="lazy"><figcaption>image-20220110111037603</figcaption></figure><p>在 Spring Security 中，用户请求一个资源(通常是一个接口或者一个 Java 方法)需要的角色会被封装成一个 ConfigAttribute 对象，在 ConfigAttribute 中只有一个 getAttribute方法，该方法返回一个 String 字符串，就是角色的名称。一般来说，角色名称都带有一个 <code>ROLE_</code> 前缀，投票器 AccessDecisionVoter 所做的事情，其实就是比较用户所具各的角色和请求某个 资源所需的 ConfigAtuibute 之间的关系。</p>`,32),c=[t];function o(r,p){return n(),e("div",null,c)}const u=a(i,[["render",o],["__file","20-1679900050223.html.vue"]]);export{u as default};
