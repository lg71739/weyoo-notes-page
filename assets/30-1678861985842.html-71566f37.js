import{_ as a,o as n,c as s,f as e}from"./app-19e0b0f0.js";const t={},i=e(`<h1 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h1><p>MyBatis-Plus提供的注解可以帮我们解决一些数据库与实体之间相互映射的问题。</p><h2 id="_1-tablename" tabindex="-1"><a class="header-anchor" href="#_1-tablename" aria-hidden="true">#</a> 1.@TableName</h2><h3 id="_1-1引出问题" tabindex="-1"><a class="header-anchor" href="#_1-1引出问题" aria-hidden="true">#</a> 1.1 引出问题</h3><hr><blockquote><p><strong>若实体类类型的类名和要操作的表的表名不一致，会出现什么问题？</strong></p></blockquote><ul><li><p>我们将表<code>user</code>更名为<code>t_user</code>，测试查询功能</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/17_11_17_38_image-20220520093844842.png" alt="image-20220520093844842" tabindex="0" loading="lazy"><figcaption>image-20220520093844842</figcaption></figure></li><li><p>程序抛出异常，<strong>Table &#39;mybatis_plus.user&#39; doesn&#39;t exist</strong>，因为现在的表名为<code>t_user</code>，而默认操作的表名和实体类型的类名一致，即<code>user</code>表</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/15_14_59_12_image-20220520094126411.png" alt="image-20220520094126411" tabindex="0" loading="lazy"><figcaption>image-20220520094126411</figcaption></figure></li></ul><h3 id="_1-2解决问题" tabindex="-1"><a class="header-anchor" href="#_1-2解决问题" aria-hidden="true">#</a> 1.2 解决问题</h3><h4 id="a、使用注解解决问题" tabindex="-1"><a class="header-anchor" href="#a、使用注解解决问题" aria-hidden="true">#</a> a、使用注解解决问题</h4><blockquote><p>在实体类类型上添加<code>@TableName(&quot;t_user&quot;)</code>，标识实体类对应的表，即可成功执行SQL语句</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;t_user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b、使用全局配置解决问题" tabindex="-1"><a class="header-anchor" href="#b、使用全局配置解决问题" aria-hidden="true">#</a> b、使用全局配置解决问题</h4><blockquote><p>在开发的过程中，我们经常遇到以上的问题，即实体类所对应的表都有固定的前缀，例如 <code>t_</code> 或 <code>tbl_</code> 此时，可以使用MyBatis-Plus提供的全局配置，为实体类所对应的表名设置默认的前缀，那么就不需要在每个实体类上通过@TableName标识实体类对应的表</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token comment"># 设置实体类所对应的表的统一前缀</span>
      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-tableid" tabindex="-1"><a class="header-anchor" href="#_2-tableid" aria-hidden="true">#</a> 2.@TableId</h2><blockquote><p>经过以上的测试，MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id</p></blockquote><h3 id="_2-1引出问题" tabindex="-1"><a class="header-anchor" href="#_2-1引出问题" aria-hidden="true">#</a> 2.1 引出问题</h3><hr><blockquote><p>若实体类和表中表示主键的不是id，而是其他字段，例如uid，MyBatis-Plus会自动识别uid为主键列吗？</p></blockquote><ul><li><p>我们实体类中的属性<code>id</code>改为<code>uid</code>，将表中的字段<code>id</code>也改为<code>uid</code>，测试添加功能</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/15_14_59_12_image-20220520100939157.png" alt="image-20220520100939157" tabindex="0" loading="lazy"><figcaption>image-20220520100939157</figcaption></figure><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/15_14_59_41_image-20220520100715109.png" alt="image-20220520100715109" tabindex="0" loading="lazy"><figcaption>image-20220520100715109</figcaption></figure></li><li><p>程序抛出异常，<code>Field &#39;uid&#39; doesn&#39;t have a default value</code>，说明MyBatis-Plus没有将<code>uid</code>作为主键赋值</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/15_14_59_12_image-20220520101317761.png" alt="image-20220520101317761" tabindex="0" loading="lazy"><figcaption>image-20220520101317761</figcaption></figure></li></ul><h3 id="_2-2解决问题" tabindex="-1"><a class="header-anchor" href="#_2-2解决问题" aria-hidden="true">#</a> 2.2 解决问题</h3><hr><blockquote><p><strong>在实体类中uid属性上通过<code>@TableId</code>将其标识为主键，即可成功执行SQL语句</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Date</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@TableId</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> uid<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-tableid的value属性" tabindex="-1"><a class="header-anchor" href="#_2-3-tableid的value属性" aria-hidden="true">#</a> 2.3 @TableId的value属性</h3><hr><blockquote><p>若实体类中主键对应的属性为id，而表中表示主键的字段为uid，此时若只在属性id上添加注解@TableId，则抛出异常<strong>Unknown column &#39;id&#39; in &#39;field list&#39;</strong>，即MyBatis-Plus仍然会将id作为表的主键操作，而表中表示主键的是字段uid此时需要通过@TableId注解的value属性，指定表中的主键字段，<code>@TableId(&quot;uid&quot;)</code>或<code>@TableId(value=&quot;uid&quot;)</code></p></blockquote><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/15_14_59_12_image-20220520103030977.png" alt="image-20220520103030977" tabindex="0" loading="lazy"><figcaption>image-20220520103030977</figcaption></figure><h3 id="_2-4-tableid的type属性" tabindex="-1"><a class="header-anchor" href="#_2-4-tableid的type属性" aria-hidden="true">#</a> 2.4 @TableId的type属性</h3><hr><blockquote><p><strong>type属性用来定义主键策略：默认雪花算法</strong></p></blockquote><p><strong>常用的主键策略：</strong></p><table><thead><tr><th style="text-align:center;">值</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">IdType.ASSIGN_ID（默认）</td><td style="text-align:center;">基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td></tr><tr><td style="text-align:center;">IdType.AUTO</td><td style="text-align:center;">使用数据库的自增策略，注意，该类型请确保数据库设置了id自增，</td></tr></tbody></table><p><strong>配置全局主键策略：</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#MyBatis-Plus相关配置</span>
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token comment">#配置日志</span>
    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token comment">#配置mp的主键策略为自增</span>
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto
      <span class="token comment"># 设置实体类所对应的表的统一前缀</span>
      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-tbalefield" tabindex="-1"><a class="header-anchor" href="#_3-tbalefield" aria-hidden="true">#</a> 3.@TbaleField</h2><blockquote><p>经过以上的测试，我们可以发现，MyBatis-Plus在执行SQL语句时，要保证实体类中的属性名和表中的字段名一致</p><p>如果实体类中的属性名和字段名不一致的情况，会出现什么问题呢？</p></blockquote><h3 id="_3-1情况一" tabindex="-1"><a class="header-anchor" href="#_3-1情况一" aria-hidden="true">#</a> 3.1 情况一</h3><hr><p>若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格</p><p>例如实体类属性<code>userName</code>，表中字段<code>user_name</code></p><p>此时MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格</p><p>相当于在MyBatis中配置</p><h3 id="_3-2情况二" tabindex="-1"><a class="header-anchor" href="#_3-2情况二" aria-hidden="true">#</a> 3.2 情况二</h3><hr><blockquote><p>若实体类中的属性和表中的字段不满足情况1</p><p>例如实体类属性<code>name</code>，表中字段<code>username</code></p><p>此时需要在实体类属性上使用<code>@TableField(&quot;username&quot;)</code>设置属性所对应的字段名</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-tablelogic" tabindex="-1"><a class="header-anchor" href="#_4-tablelogic" aria-hidden="true">#</a> 4.@TableLogic</h2><h3 id="_4-1逻辑删除" tabindex="-1"><a class="header-anchor" href="#_4-1逻辑删除" aria-hidden="true">#</a> 4.1 逻辑删除</h3><blockquote><p>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</p><p>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</p><p>使用场景：可以进行数据恢复</p></blockquote><h3 id="_4-2实现逻辑删除" tabindex="-1"><a class="header-anchor" href="#_4-2实现逻辑删除" aria-hidden="true">#</a> 4.2 实现逻辑删除</h3><ul><li><p><strong>数据库中创建逻辑删除状态列，设置默认值为0</strong></p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/15_15_7_56_image-20220520134529809.png" alt="image-20220520134529809" tabindex="0" loading="lazy"><figcaption>image-20220520134529809</figcaption></figure></li><li><p><strong>实体类中添加逻辑删除属性</strong></p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/15_14_59_13_image-20220520134636112.png" alt="image-20220520134636112" tabindex="0" loading="lazy"><figcaption>image-20220520134636112</figcaption></figure></li><li><p><strong>测试删除功能，真正执行的是修改</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1527472864163348482L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;删除成功！&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;删除失败！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;受影响的行数为：&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/15_15_0_36_image-20220520135637388.png" alt="image-20220520135637388" tabindex="0" loading="lazy"><figcaption>image-20220520135637388</figcaption></figure></li><li><p><strong>此时执行查询方法，查询的结果为自动添加条件<code>is_deleted=0</code></strong></p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/03/15_14_59_13_image-20220520140036445.png" alt="image-20220520140036445" tabindex="0" loading="lazy"><figcaption>image-20220520140036445</figcaption></figure></li></ul>`,52),l=[i];function o(p,c){return n(),s("div",null,l)}const u=a(t,[["render",o],["__file","30-1678861985842.html.vue"]]);export{u as default};
