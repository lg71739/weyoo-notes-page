import{_ as r,r as h,o as d,c as s,d as e,e as a,b as n,f as t}from"./app-19e0b0f0.js";const l={},c=t('<h1 id="sentinel-基本概念" tabindex="-1"><a class="header-anchor" href="#sentinel-基本概念" aria-hidden="true">#</a> Sentinel 基本概念</h1><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/06/13_9_3_51_43697219-3cb4ef3a-9975-11e8-9a9c-73f4f537442d.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="sentinel-简介" tabindex="-1"><a class="header-anchor" href="#sentinel-简介" aria-hidden="true">#</a> Sentinel 简介</h2>',3),o={href:"https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D",target:"_blank",rel:"noopener noreferrer"},p={href:"https://github.com/alibaba/Sentinel",target:"_blank",rel:"noopener noreferrer"},g=t('<p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><h3 id="sentinel-特征" tabindex="-1"><a class="header-anchor" href="#sentinel-特征" aria-hidden="true">#</a> Sentinel 特征</h3><ul><li><p>丰富的应用场景：</p><p>Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</p></li><li><p><strong>完备的实时监控</strong>：</p><p>Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</p></li><li><p><strong>广泛的开源生态</strong>：</p><p>Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Apache Dubbo、gRPC、Quarkus 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。同时 Sentinel 提供 Java/Go/C++ 等多语言的原生实现。</p></li><li><p><strong>完善的 SPI 扩展机制</strong>：</p><p>Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</p></li></ul><h3 id="主要特性" tabindex="-1"><a class="header-anchor" href="#主要特性" aria-hidden="true">#</a> 主要特性</h3><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/06/12_16_39_26_image-20230612163919671.png" alt="image-20230612163919671" tabindex="0" loading="lazy"><figcaption>image-20230612163919671</figcaption></figure><h3 id="两大组成部分" tabindex="-1"><a class="header-anchor" href="#两大组成部分" aria-hidden="true">#</a> 两大组成部分</h3><h4 id="核心库" tabindex="-1"><a class="header-anchor" href="#核心库" aria-hidden="true">#</a> 核心库</h4><p>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</p><h4 id="控制台" tabindex="-1"><a class="header-anchor" href="#控制台" aria-hidden="true">#</a> 控制台</h4><p>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的Tomcat 等应用容器。</p><h3 id="sentinel生态" tabindex="-1"><a class="header-anchor" href="#sentinel生态" aria-hidden="true">#</a> Sentinel生态</h3><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/06/13_9_6_11_84338449-a9497e00-abce-11ea-8c6a-473fe477b9a1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="hystrix-与-sentinel-比较" tabindex="-1"><a class="header-anchor" href="#hystrix-与-sentinel-比较" aria-hidden="true">#</a> Hystrix 与 Sentinel 比较</h3><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2023/06/12_17_51_46_12_16_40_5_image-20230612164005846.png" alt="image-20230612164005846" tabindex="0" loading="lazy"><figcaption>image-20230612164005846</figcaption></figure><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="熔断、降级与限流" tabindex="-1"><a class="header-anchor" href="#熔断、降级与限流" aria-hidden="true">#</a> 熔断、降级与限流</h3><h4 id="什么是熔断" tabindex="-1"><a class="header-anchor" href="#什么是熔断" aria-hidden="true">#</a> 什么是熔断</h4><p>A 服务调用 B 服务的某个功能，由于网络不稳定问题，或者 B 服务卡机，导致功能时间超长。如果这样子的次数太多。我们就可以直接将 B 断路了（A 不再请求 B 接口），凡是调用 B 的直接返回降级数据，不必等待 B 的超长执行。 这样 B 的故障问题，就不会级联影响到 A。</p><h4 id="什么是降级" tabindex="-1"><a class="header-anchor" href="#什么是降级" aria-hidden="true">#</a> 什么是降级</h4><p>整个网站处于流量高峰期，服务器压力剧增，根据当前业务情况及流量，对一些服务和页面进行有策略的降级[停止服务，所有的调用直接返回降级数据]。以此缓解服务器资源的的压力，以保证核心业务的正常运行，同时也保持了客户和大部分客户的得到正确的相应。</p><h4 id="什么是限流" tabindex="-1"><a class="header-anchor" href="#什么是限流" aria-hidden="true">#</a> 什么是限流</h4><p>对打入服务的请求流量进行控制，使服务能够承担不超过自己能力的流量压力</p><div class="hint-container info"><p class="hint-container-title">熔断与降级的异同点</p><p>相同点：</p><p>1、为了保证集群大部分服务的可用性和可靠性，防止崩溃，牺牲小我</p><p>2、用户最终都是体验到某个功能不可用</p><p>不同点：</p><p>1、熔断是被调用方故障，触发的系统主动规则</p><p>2、降级是基于全局考虑，停止一些正常服务，释放资源</p></div><h3 id="资源与规则" tabindex="-1"><a class="header-anchor" href="#资源与规则" aria-hidden="true">#</a> 资源与规则</h3><h4 id="资源" tabindex="-1"><a class="header-anchor" href="#资源" aria-hidden="true">#</a> 资源</h4><p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p><p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p><h4 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h4><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p>',29);function u(b,f){const i=h("ExternalLinkIcon");return d(),s("div",null,[c,e("blockquote",null,[e("p",null,[a("官方文档："),e("a",o,[a("https://github.com/alibaba/Sentinel/wiki/介绍"),n(i)])]),e("p",null,[a("项目地址："),e("a",p,[a("https://github.com/alibaba/Sentinel"),n(i)])])]),g])}const m=r(l,[["render",u],["__file","10-1686556476324.html.vue"]]);export{m as default};
