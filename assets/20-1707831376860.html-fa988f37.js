import{_ as a,o as e,c as i,f as s}from"./app-19e0b0f0.js";const n={},t=s(`<h1 id="git常用命令" tabindex="-1"><a class="header-anchor" href="#git常用命令" aria-hidden="true">#</a> Git常用命令</h1><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git config user.name 用户名</code></td><td style="text-align:left;">设置用户签名</td></tr><tr><td style="text-align:left;"><code>git config user.email 邮箱</code></td><td style="text-align:left;">设置用户签名</td></tr><tr><td style="text-align:left;"><code>git init</code></td><td style="text-align:left;">初始化本地库</td></tr><tr><td style="text-align:left;"><code>git status</code></td><td style="text-align:left;">查看本地库状态</td></tr><tr><td style="text-align:left;"><code>git add 文件名</code></td><td style="text-align:left;">添加至暂存区</td></tr><tr><td style="text-align:left;"><code>git commit -m &quot;日志信息&quot; 文件名</code></td><td style="text-align:left;">提交至本地库</td></tr><tr><td style="text-align:left;"><code>git reflog</code></td><td style="text-align:left;">查看历史记录</td></tr><tr><td style="text-align:left;"><code>git reset --hard 版本号</code></td><td style="text-align:left;">版本穿梭</td></tr></tbody></table><h2 id="设置用户签名" tabindex="-1"><a class="header-anchor" href="#设置用户签名" aria-hidden="true">#</a> 设置用户签名</h2><p>一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。</p><p>当然，如果需要，你随时可以用相同的命令修改已有的配置。</p><p>Git 提供了一个叫做<code>git config</code>的命令来配置或读取相应的工作环境变量。</p><p>而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。</p><p>这些变量可以存放在以下三个不同的地方：</p><ul><li><p><code>/etc/gitconfig</code>文件：系统中对所有用户都普遍适用的配置。若使用<code>git config</code>时用<code>--system</code>选项，读写的就是这个文件</p></li><li><p><code>~/gitconfig</code>文件：用户目录下的配置文件只适用于该用户。若使用<code>git config</code>时用<code>--global</code>选项，读写的就是这个文件</p></li><li><p><code>.git/config</code>文件：当前项目的 Git 目录中的配置文件，这里的配置仅仅针对当前项目有效</p><p><mark>每一个级别的配置都会覆盖上层的相同配置</mark></p></li></ul><p><mark>Git 首次安装必须设置一下用户签名，否则无法提交代码</mark></p><p>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的</p><p>在 <code>C:\\Users\\用户名\\</code>目录下 <code>.gitconfig</code> 文件查看配置信息</p><p>‼️ 注意：这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系</p><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name 用户名
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email 邮箱
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><p>全局范围的签名设置</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_54_23_202402132154904.png" alt="image-20210917001235229" tabindex="0" loading="lazy"><figcaption>image-20210917001235229</figcaption></figure><p>说明：</p><p>要检查已有的配置信息，可以使用命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/14_9_34_29_202402140934278.png" alt="image-20210920134343229" tabindex="0" loading="lazy"><figcaption>image-20210920134343229</figcaption></figure><h2 id="初始化本地库" tabindex="-1"><a class="header-anchor" href="#初始化本地库" aria-hidden="true">#</a> 初始化本地库</h2><p>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行命令</p><p><strong>作用</strong>：初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p><p>不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件</p><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）案例实操</p><p>项目文件夹下就会生成.git文件，这是一个隐藏文件。</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_54_31_202402132154337.png" alt="image-20210917203400924" tabindex="0" loading="lazy"><figcaption>image-20210917203400924</figcaption></figure><h2 id="查看本地库状态" tabindex="-1"><a class="header-anchor" href="#查看本地库状态" aria-hidden="true">#</a> 查看本地库状态</h2><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）案例实操</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_54_43_202402132154608.gif" alt="git status" tabindex="0" loading="lazy"><figcaption>git status</figcaption></figure><p>新增文件前</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_55_3_202402132155601.png" alt="image-20210917204804510" tabindex="0" loading="lazy"><figcaption>image-20210917204804510</figcaption></figure><p>新增文件后</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_55_10_202402132155805.png" alt="image-20210917204858689" tabindex="0" loading="lazy"><figcaption>image-20210917204858689</figcaption></figure><h2 id="添加暂存区" tabindex="-1"><a class="header-anchor" href="#添加暂存区" aria-hidden="true">#</a> 添加暂存区</h2><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加指定文件</span>
<span class="token function">git</span> <span class="token function">add</span> 文件名
<span class="token comment"># 把所有文件添加到暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><p>红色表示仍在工作区，修改尚未被追踪；绿色表示已添加至暂存区，修改被追踪</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_55_19_202402132155372.png" alt="image-20210917205319556" tabindex="0" loading="lazy"><figcaption>image-20210917205319556</figcaption></figure><p>使用命令，删除暂存区该文件（只是删除暂存区，不影响工作区）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> hello.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_55_50_202402132155662.png" alt="image-20210917205546165" tabindex="0" loading="lazy"><figcaption>image-20210917205546165</figcaption></figure><h2 id="提交至本地库" tabindex="-1"><a class="header-anchor" href="#提交至本地库" aria-hidden="true">#</a> 提交至本地库</h2><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -m 表示添加一个版本日志信息，不写此参数也会打开日志信息的文件框。一般带参数</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;日志信息&quot;</span> 文件名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><p>正常操作</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_56_48_202402132156740.png" alt="image-20210917210542226" tabindex="0" loading="lazy"><figcaption>image-20210917210542226</figcaption></figure><p>无<code>-m</code>参数时</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_57_11_202402132157044.png" alt="image-20210917210109185" tabindex="0" loading="lazy"><figcaption>image-20210917210109185</figcaption></figure><p>如果强制退出</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_57_43_202402132157629.png" alt="image-20210917210156460" tabindex="0" loading="lazy"><figcaption>image-20210917210156460</figcaption></figure><h2 id="修改文件" tabindex="-1"><a class="header-anchor" href="#修改文件" aria-hidden="true">#</a> 修改文件</h2><p>案例实操</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_58_7_202402132158334.png" alt="image-20210917211143162" tabindex="0" loading="lazy"><figcaption>image-20210917211143162</figcaption></figure><p>git 里是按照行维护文件的，所以修改内容其实就是之前的行删除，修改过后的行添加进来</p><p>因此在<code>commit</code>之后提示信息<code>1 insertion(+), 1 deletion(-)</code></p><h2 id="历史版本" tabindex="-1"><a class="header-anchor" href="#历史版本" aria-hidden="true">#</a> 历史版本</h2><h3 id="查看历史版本" tabindex="-1"><a class="header-anchor" href="#查看历史版本" aria-hidden="true">#</a> 查看历史版本</h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看精简版本信息</span>
<span class="token function">git</span> reflog
<span class="token comment"># 查看详细版本信息</span>
<span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_58_16_202402132158628.png" alt="image-20210917211945690" tabindex="0" loading="lazy"><figcaption>image-20210917211945690</figcaption></figure><h3 id="版本穿梭-回退" tabindex="-1"><a class="header-anchor" href="#版本穿梭-回退" aria-hidden="true">#</a> 版本穿梭(回退)</h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 版本号
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）案例实操</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_58_23_202402132158505.png" alt="image-20210917212348218" tabindex="0" loading="lazy"><figcaption>image-20210917212348218</figcaption></figure><p>文件验证当前版本号</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_58_28_202402132158949.png" alt="image-20210917212941200" tabindex="0" loading="lazy"><figcaption>image-20210917212941200</figcaption></figure><p>Git 切换版本，底层其实是移动的 HEAD 指针，具体原理如下图所示</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_58_35_202402132158264.png" alt="image-20210917213424162" tabindex="0" loading="lazy"><figcaption>image-20210917213424162</figcaption></figure><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_58_41_202402132158843.png" alt="image-20210917213247141" tabindex="0" loading="lazy"><figcaption>image-20210917213247141</figcaption></figure><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_21_54_15_202402132154718.png" alt="image-20210917213333350" tabindex="0" loading="lazy"><figcaption>image-20210917213333350</figcaption></figure><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><h3 id="添加远程仓库地址" tabindex="-1"><a class="header-anchor" href="#添加远程仓库地址" aria-hidden="true">#</a> 添加远程仓库地址</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 把链接替换成自己的</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/oddfar/docs.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拉取远程仓库" tabindex="-1"><a class="header-anchor" href="#拉取远程仓库" aria-hidden="true">#</a> 拉取远程仓库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span>  pull origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>作用是拉取远程仓库的文件，拉取本地没有的文件和新更改的文件</p><h3 id="推送到远程仓库" tabindex="-1"><a class="header-anchor" href="#推送到远程仓库" aria-hidden="true">#</a> 推送到远程仓库</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>至此，已成功提交到远程。</p><h3 id="远程仓库别名" tabindex="-1"><a class="header-anchor" href="#远程仓库别名" aria-hidden="true">#</a> 远程仓库别名</h3><p>对于用 https 已经克隆在本地的仓库，我们可以加个“别名”来进行 SSH 链接</p><p><strong>1）基本语法</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前所有远程地址别名</span>
<span class="token function">git</span> remote <span class="token parameter variable">-v</span> 

<span class="token function">git</span> remote <span class="token function">add</span> 别名 远程地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2）案例</strong></p><p>我们提交到远程仓库的指令是：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push 远程仓库地址 分支
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个地址可以是 https 也可以是 ssh</p><p>但由于地址太长了，可以用“别名”代替地址！</p><p>添加别名</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> <span class="token function">ssh</span> git@github.com:oddfar/docs.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>推送到远程仓库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token function">ssh</span> master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们 clone 项目，默认有个“别名” <code>origin</code> 指向我们 clone 时的远程仓库地址（https或ssh...）</p>`,104),d=[t];function l(c,r){return e(),i("div",null,d)}const p=a(n,[["render",l],["__file","20-1707831376860.html.vue"]]);export{p as default};
