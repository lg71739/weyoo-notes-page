import{_ as t,r as i,o,c as l,d as n,e as a,b as e,f as p}from"./app-19e0b0f0.js";const c={},r=p(`<h1 id="主键生成策略" tabindex="-1"><a class="header-anchor" href="#主键生成策略" aria-hidden="true">#</a> 主键生成策略</h1><p>MyBatis-Plus 支持如下类型的主键生成策略</p><h2 id="主键生成策略类型" tabindex="-1"><a class="header-anchor" href="#主键生成策略类型" aria-hidden="true">#</a> 主键生成策略类型</h2><h3 id="auto" tabindex="-1"><a class="header-anchor" href="#auto" aria-hidden="true">#</a> AUTO</h3><p>数据库自增ID</p><p>需要数据库设置id字段为自增才可以，否则会报错</p><h3 id="id-worker" tabindex="-1"><a class="header-anchor" href="#id-worker" aria-hidden="true">#</a> ID_WORKER</h3><p>该项为MyBatis-Plus的默认策略，采用雪花算法生成对应的id值。</p><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p><h3 id="uuid" tabindex="-1"><a class="header-anchor" href="#uuid" aria-hidden="true">#</a> UUID</h3><p>UUID形式</p><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> INPUT</h3><p>自定义模式，需要自己指定ID的值，如果不指定，id值为null</p><h3 id="id-worker-str" tabindex="-1"><a class="header-anchor" href="#id-worker-str" aria-hidden="true">#</a> ID_WORKER_STR</h3><p>雪花算法的字符串表示形式</p><h3 id="none" tabindex="-1"><a class="header-anchor" href="#none" aria-hidden="true">#</a> NONE</h3><p>不指定主键生成策略</p><h2 id="主键生成策略的设置" tabindex="-1"><a class="header-anchor" href="#主键生成策略的设置" aria-hidden="true">#</a> 主键生成策略的设置</h2><h3 id="全局配置" tabindex="-1"><a class="header-anchor" href="#全局配置" aria-hidden="true">#</a> 全局配置</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#MyBatis-Plus相关配置</span>
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token comment">#配置日志</span>
    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token comment">#配置mp的主键策略为自增</span>
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto
      <span class="token comment"># 设置实体类所对应的表的统一前缀</span>
      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实体类配置" tabindex="-1"><a class="header-anchor" href="#实体类配置" aria-hidden="true">#</a> 实体类配置</h3><p>在实体类的主键属性上增加注解即可指定相应的主键策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;puser&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">ID_WORKER</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span>  <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),d=n("br",null,null,-1),u={href:"https://www.cnblogs.com/haoxinyue/p/5208136.html",target:"_blank",rel:"noopener noreferrer"},h=n("br",null,null,-1),k={href:"https://zhuanlan.zhihu.com/p/107939861",target:"_blank",rel:"noopener noreferrer"};function m(v,b){const s=i("ExternalLinkIcon");return o(),l("div",null,[r,n("blockquote",null,[n("p",null,[a("参考资料: 分布式系统唯一ID生成方案汇总"),d,n("a",u,[a("https://www.cnblogs.com/haoxinyue/p/5208136.html"),e(s)]),h,n("a",k,[a("https://zhuanlan.zhihu.com/p/107939861"),e(s)])])])])}const f=t(c,[["render",m],["__file","20-1677130047959.html.vue"]]);export{f as default};
